Python 2.7.6 (default, Mar 22 2014, 22:59:56) 
[GCC 4.8.2] on linux2
Type "copyright", "credits" or "license()" for more information.
>>> ================================ RESTART ================================
>>> 

Traceback (most recent call last):
  File "/media/formans/USB DISK/PythonOberon/oberon/check.py", line 7, in <module>
    f0 = open(D + '/pytrace.txt')
IOError: [Errno 2] No such file or directory: '/home/sforman/Desktop/pytrace.txt'
>>> ================================ RESTART ================================
>>> 

Traceback (most recent call last):
  File "/media/formans/USB DISK/PythonOberon/oberon/check.py", line 7, in <module>
    f0 = open(D + '/pytrace.txt')
IOError: [Errno 2] No such file or directory: '/home/sforman/Desktop/pytrace.txt'
>>> ================================ RESTART ================================
>>> 

Traceback (most recent call last):
  File "/media/formans/USB DISK/PythonOberon/oberon/check.py", line 7, in <module>
    f0 = open(D + '/pytrace.txt')
IOError: [Errno 2] No such file or directory: '/home/formans/Desktop/pytrace.txt'
>>> ================================ RESTART ================================
>>> 
0
LEDs 10000000
LEDs: 7-------

1
LEDs 10000010
LEDs: 7-----1-

2
LEDs 10000100
LEDs: 7----2--

1349743
0x00002a3c : 0xa0e00004 0 0 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a3c : 0xa0e00004 1399421542 0 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349744
0x00002a3d : 0x80e00004 0 0 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a3d : 0x80e00004 1399421542 0 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349745
0x00002a3e : 0x61005369 0 0 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a3e : 0x61005369 1399421542 0 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349746
0x00002a3f : 0x41167a65 0 1399390208 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a3f : 0x41167a65 1399421542 1399390208 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349747
0x00002a40 : 0x00090001 0 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a40 : 0x00090001 1399421542 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349748
0x00002a41 : 0xe900000c -1399421541 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a41 : 0xe900000c 1 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349749
0x00002a4e : 0x80e00004 -1399421541 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a4e : 0x80e00004 1 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349750
0x00002a4f : 0x61005369 0 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a4f : 0x61005369 1399421542 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

>>> f0.tell()
110813184
>>> f0.seek(110813184 - 2048)
>>> next(f0)
'9 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4\n'
>>> next(f0)
'0x00002a67 : 0x8fe00000 128 1399421542 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4\n'
>>> from util import dis

Traceback (most recent call last):
  File "<pyshell#4>", line 1, in <module>
    from util import dis
ImportError: cannot import name dis
>>> from assembler import dis
>>> dis(0xa0e00004)
'Store R0 -> [R14 + 0x00000004]'
>>> hex(950016)
'0xe7f00'
>>> dis(0x80000000)
'Load R0 <- [R0 + 0x00000000]'
>>> ================================ RESTART ================================
>>> 
LEDs 10000000
LEDs 10000010
LEDs 10000100
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(37)cycle()
-> instruction = self.fetch()
(Pdb) l
 32  	
 33  	  def cycle(self):
 34  	    self.PC = self.pcnext
 35  	    if self.PC == 0x00002a3b:
 36  	      pdb.set_trace()
 37  ->	    instruction = self.fetch()
 38  	    if instruction == 0xe7ffffff: # REPEAT UNTIL False i.e. halt loop.
 39  	      raise Trap('REPEAT UNTIL False ing')
 40  	##    if self.PC < MemWords:
 41  	##      print '0x%08x : 0x%08x %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i 0x%x' % ((self.PC, instruction,
 42  	##                                                                                 ) + tuple(map(signed2py, self.R[:-1]))
(Pdb) self.PC
10811
(Pdb) hex(self.PC)
'0x2a3b'
(Pdb) self.R[0]
950016
(Pdb) hex(self.R[0])
'0xe7f00'
(Pdb) dis(self.IR)
'Ior R0 <- R0 32512 (u: False, v: False)'
(Pdb) l
 43  	##                                                                                 + (self.R[-1],))
 44  	    self.decode(instruction)
 45  	    self.what_are_we_up_to()
 46  	    self.control_unit()
 47  	
 48  	  def fetch(self):
 49  	    if self.PC < MemWords:
 50  	      return self.ram[self.PC << 2]
 51  	    if ROMStart <= self.PC < (ROMStart + len(self.rom)):
 52  	      PC = self.PC - ROMStart
 53  	      return self.rom[PC]
(Pdb) next
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(38)cycle()
-> if instruction == 0xe7ffffff: # REPEAT UNTIL False i.e. halt loop.
(Pdb) l
 33  	  def cycle(self):
 34  	    self.PC = self.pcnext
 35  	    if self.PC == 0x00002a3b:
 36  	      pdb.set_trace()
 37  	    instruction = self.fetch()
 38  ->	    if instruction == 0xe7ffffff: # REPEAT UNTIL False i.e. halt loop.
 39  	      raise Trap('REPEAT UNTIL False ing')
 40  	##    if self.PC < MemWords:
 41  	##      print '0x%08x : 0x%08x %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i 0x%x' % ((self.PC, instruction,
 42  	##                                                                                 ) + tuple(map(signed2py, self.R[:-1]))
 43  	##                                                                                 + (self.R[-1],))
(Pdb) dis(self.IR)
'Ior R0 <- R0 32512 (u: False, v: False)'
(Pdb) dis(instruction)
'Load R0 <- [R0 + 0x00000000]'
(Pdb) s
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(44)cycle()
-> self.decode(instruction)
(Pdb) s
--Call--
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(56)decode()
-> def decode(self, instruction):
(Pdb) s
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(57)decode()
-> self.IR = IR = bint(instruction)
(Pdb) return
--Return--
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(71)decode()->None
-> self.C0 = self.R[self.irc]
(Pdb) l
 66  	    self.irc = IR[4, 0]
 67  	    self.cc = IR[27, 24]
 68  	    self.imm = IR[16, 0]
 69  	    self.off = IR[20, 0]
 70  	    self.jmp = IR[24, 0]
 71  ->	    self.C0 = self.R[self.irc]
 72  	
 73  	  def what_are_we_up_to(self):
 74  	    self.MOV = (not self.p) and (self.op == 0)
 75  	    self.LSL = (not self.p) and (self.op == 1)
 76  	    self.ASR = (not self.p) and (self.op == 2)
(Pdb) next
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(45)cycle()
-> self.what_are_we_up_to()
(Pdb) l
 40  	##    if self.PC < MemWords:
 41  	##      print '0x%08x : 0x%08x %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i 0x%x' % ((self.PC, instruction,
 42  	##                                                                                 ) + tuple(map(signed2py, self.R[:-1]))
 43  	##                                                                                 + (self.R[-1],))
 44  	    self.decode(instruction)
 45  ->	    self.what_are_we_up_to()
 46  	    self.control_unit()
 47  	
 48  	  def fetch(self):
 49  	    if self.PC < MemWords:
 50  	      return self.ram[self.PC << 2]
(Pdb) n
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(46)cycle()
-> self.control_unit()
(Pdb) step
--Call--
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(91)control_unit()
-> def control_unit(self):
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(92)control_unit()
-> if not self.p:
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(94)control_unit()
-> elif self.q:
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(97)control_unit()
-> self.ram_instruction()
(Pdb) 
--Call--
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(262)ram_instruction()
-> def ram_instruction(self):
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(263)ram_instruction()
-> self.addr = addr = int(self.R[self.irb] + self.off)
(Pdb) l
258  	      self.pcnext = int(offset + self.PC + 1)
259  	    else:
260  	      self.pcnext = self.C0 >> 2
261  	
262  	  def ram_instruction(self):
263  ->	    self.addr = addr = int(self.R[self.irb] + self.off)
264  	    if addr >= IO_RANGE:
265  	      self.io(addr - IO_RANGE)
266  	    elif self.LDR:
267  	      value = self.ram.get_byte(addr) if self.v else self.ram[addr]
268  	      self.set_register(value)
(Pdb) self.ram[self.R[0]]
1399421542
(Pdb) self.irb
0
(Pdb) self.off
0
(Pdb) int(self.R[self.irb] + self.off)
950016
(Pdb) s
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(264)ram_instruction()
-> if addr >= IO_RANGE:
(Pdb) addr
950016
(Pdb) s
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(266)ram_instruction()
-> elif self.LDR:
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(267)ram_instruction()
-> value = self.ram.get_byte(addr) if self.v else self.ram[addr]
(Pdb) l
262  	  def ram_instruction(self):
263  	    self.addr = addr = int(self.R[self.irb] + self.off)
264  	    if addr >= IO_RANGE:
265  	      self.io(addr - IO_RANGE)
266  	    elif self.LDR:
267  ->	      value = self.ram.get_byte(addr) if self.v else self.ram[addr]
268  	      self.set_register(value)
269  	    elif self.v:
270  	      self.ram.put_byte(addr, self.R[self.ira] & 255)
271  	    else:
272  	      self.ram[addr] = self.R[self.ira]
(Pdb) self.v
False
(Pdb) self.ram[addr]
1399421542
(Pdb) hex(self.PC)
'0x2a3b'
(Pdb) s
--Call--
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(328)get()
-> def get(self, addr):
(Pdb) value
*** NameError: name 'value' is not defined
(Pdb) s
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(331)get()
-> word_addr, byte_offset = divmod(addr, 4)
(Pdb) s
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(332)get()
-> assert not byte_offset, repr(addr)
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(333)get()
-> try:
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(334)get()
-> value = self.store[word_addr]
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(338)get()
-> return value
(Pdb) value
1399421542
(Pdb) s
--Return--
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(338)get()->1399421542
-> return value
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(268)ram_instruction()
-> self.set_register(value)
(Pdb) s
--Call--
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(227)set_register()
-> def set_register(self, value):
(Pdb) s
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(228)set_register()
-> value = value if isinstance(value, bint) else bint(value)
(Pdb) n
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(229)set_register()
-> self.R[self.ira] = value[32:0]
(Pdb) value
1399421542
(Pdb) type(value)
<class 'util.bint'>
(Pdb) bin(value)
'0b1010011011010010111101001100110'
(Pdb) hex(value)
'0x53697a66'
(Pdb) self.ira
0
(Pdb) value[32:0]
1399421542
(Pdb) s
--Call--
> /media/formans/USB DISK/PythonOberon/oberon/util.py(128)__getitem__()
-> def __getitem__(self, n):
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/util.py(129)__getitem__()
-> if isinstance(n, tuple):
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/util.py(134)__getitem__()
-> if isinstance(n, slice):
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/util.py(135)__getitem__()
-> return self._getslice(n)
(Pdb) 
--Call--
> /media/formans/USB DISK/PythonOberon/oberon/util.py(138)_getslice()
-> def _getslice(self, s):
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/util.py(139)_getslice()
-> n = s.start - s.stop
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/util.py(140)_getslice()
-> if n < 0:
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/util.py(142)_getslice()
-> if not n:
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/util.py(144)_getslice()
-> if s.step:
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/util.py(147)_getslice()
-> return self._mask(s.stop, n)
(Pdb) 
--Call--
> /media/formans/USB DISK/PythonOberon/oberon/util.py(149)_mask()
-> def _mask(self, stop, n):
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/util.py(150)_mask()
-> return type(self)(self >> stop & (2**n - 1))
(Pdb) 
--Return--
> /media/formans/USB DISK/PythonOberon/oberon/util.py(150)_mask()->1399421542
-> return type(self)(self >> stop & (2**n - 1))
(Pdb) 
--Return--
> /media/formans/USB DISK/PythonOberon/oberon/util.py(147)_getslice()->1399421542
-> return self._mask(s.stop, n)
(Pdb) 
--Return--
> /media/formans/USB DISK/PythonOberon/oberon/util.py(135)__getitem__()->1399421542
-> return self._getslice(n)
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(230)set_register()
-> self.N = value[31]
(Pdb) l
225  	    self.set_register(regmux)
226  	
227  	  def set_register(self, value):
228  	    value = value if isinstance(value, bint) else bint(value)
229  	    self.R[self.ira] = value[32:0]
230  ->	    self.N = value[31]
231  	    self.Z = value == 0
232  	    self.H = (self.product[64:32] if self.MUL
233  	              else self.remainder if self.DIV
234  	              else self.H)
235  	
(Pdb) n
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(231)set_register()
-> self.Z = value == 0
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(232)set_register()
-> self.H = (self.product[64:32] if self.MUL
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(233)set_register()
-> else self.remainder if self.DIV
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(234)set_register()
-> else self.H)
(Pdb) 
--Return--
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(234)set_register()->None
-> else self.H)
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(273)ram_instruction()
-> self.pcnext = self.PC + 1
(Pdb) l
268  	      self.set_register(value)
269  	    elif self.v:
270  	      self.ram.put_byte(addr, self.R[self.ira] & 255)
271  	    else:
272  	      self.ram[addr] = self.R[self.ira]
273  ->	    self.pcnext = self.PC + 1
274  	
275  	  def io(self, port):
276  	    device = self.io_ports.get(port)
277  	    if not device:
278  	      raise Trap('no device at port 0x%x (aka %i)' % (port, port))
(Pdb) n
--Return--
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(273)ram_instruction()->None
-> self.pcnext = self.PC + 1
(Pdb) 
--Return--
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(97)control_unit()->None
-> self.ram_instruction()
(Pdb) 
--Return--
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(46)cycle()->None
-> self.control_unit()
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(403)cycle()
-> while True:
(Pdb) l
398  	  risc_cpu.io_ports[16] = fakespi.data
399  	
400  	  fakespi.register(1, disk)
401  	
402  	  def cycle():
403  ->	    while True:
404  	      try:
405  	        risc_cpu.cycle()
406  	#        risc_cpu.view()
407  	      except:
408  	        risc_cpu.dump_ram()
(Pdb) s
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(404)cycle()
-> try:
(Pdb) cont
  0x1af7 BR T [R15]
  0x1af8 Sub R14 <- R14 12 (u: False, v: False)
  0x1af9 Store R15 -> [R14 + 0x00000000]
  0x1afa Store R0 -> [R14 + 0x00000004]
  0x1afb Store R1 -> [R14 + 0x00000008]
  0x1afc Load R0 <- [R14 + 0x00000004]
  0x1afd Load R0 <- [R0 + 0x00000008]
  0x1afe Load R15 <- [R14 + 0x00000000]
  0x1aff Add R14 <- R14 12 (u: False, v: False)
  0x1b00 BR T [R15]
> 0x1b01 Sub R14 <- R14 20 (u: False, v: False)
  0x1b02 Store R15 -> [R14 + 0x00000000]
  0x1b03 Store R0 -> [R14 + 0x00000004]
  0x1b04 Store R1 -> [R14 + 0x00000008]
  0x1b05 Store R2 -> [R14 + 0x0000000c]
  0x1b06 Load R0 <- [R14 + 0x00000004]
  0x1b07 Load R0 <- [R0 + 0x00000014]
  0x1b08 BR_link EQ [R12]
  0x1b09 Load R1 <- [R14 + 0x00000004]
  0x1b0a Load R1 <- [R1 + 0x0000000c]
>>> ================================ RESTART ================================
>>> 
1349743
0x00002a3c : 0xa0e00004 0 0 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a3c : 0xa0e00004 1399421542 0 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349744
0x00002a3d : 0x80e00004 0 0 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a3d : 0x80e00004 1399421542 0 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349745
0x00002a3e : 0x61005369 0 0 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a3e : 0x61005369 1399421542 0 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349746
0x00002a3f : 0x41167a65 0 1399390208 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a3f : 0x41167a65 1399421542 1399390208 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349747
0x00002a40 : 0x00090001 0 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a40 : 0x00090001 1399421542 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349748
0x00002a41 : 0xe900000c -1399421541 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a41 : 0xe900000c 1 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349749
0x00002a4e : 0x80e00004 -1399421541 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a4e : 0x80e00004 1 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349750
0x00002a4f : 0x61005369 0 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a4f : 0x61005369 1399421542 1399421541 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349751
0x00002a50 : 0x41167a66 0 1399390208 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a50 : 0x41167a66 1399421542 1399390208 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349752
0x00002a51 : 0x00090001 0 1399421542 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a51 : 0x00090001 1399421542 1399421542 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

1349753
0x00002a52 : 0xe900000d -1399421542 1399421542 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4
0x00002a52 : 0xe900000d 0 1399421542 -969 0 0 0 0 0 0 0 0 43432 32 38800 523728 0xa9c4

>>> ================================ RESTART ================================
>>> 
0
LEDs 10000000
LEDs: 7-------

1
LEDs 10000010
LEDs: 7-----1-

2
LEDs 10000100
LEDs: 7----2--

3652567
0x00002da1 : 0x81100004 531592 0 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
0x00002da1 : 0x81100004 531592 43952 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c

3652568
0x00002da2 : 0x8dc0001c 531592 0 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
0x00002da2 : 0x8dc0001c 531592 43952 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c

3652569
0x00002da3 : 0x42d80000 531592 0 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
0x00002da3 : 0x42d80000 531592 43952 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c

3652570
0x00002da4 : 0x03290001 531592 0 43952 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
0x00002da4 : 0x03290001 531592 43952 43952 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c

3652571
0x00002da5 : 0xd90ddf2c 531592 0 43952 43952 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
0x00002da5 : 0xd90ddf2c 531592 43952 43952 0 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c

3652572
0x00000008 : 0xe7000c8b 531592 0 43952 43952 768 0 0 0 0 0 0 71816 32 43952 523988 0xb698
0x00002da6 : 0x8fe00000 531592 43952 43952 0 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c

3652573
0x00000c94 : 0x4ee90018 531592 0 43952 43952 768 0 0 0 0 0 0 71816 32 43952 523988 0xb698
0x00002da7 : 0x4ee80014 531592 43952 43952 0 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c

3652574
0x00000c95 : 0xafe00000 531592 0 43952 43952 768 0 0 0 0 0 0 71816 32 43952 523964 0xb698
0x00002da8 : 0xc700000f 531592 43952 43952 0 768 0 0 0 0 0 0 71816 32 43952 524008 0x1193c

>>> from assembler import dis
>>> dis(0x810ffff80
    )
'Fdv R0 <- R15 R0 (u: False)'
>>> 0x1193c / 531592.
0.1354346942768138
>>> from util import encode_float, decode_float
>>> f = -768
>>> from util import py2signed, signed2py
>>> py2signed(f)
4294966528
>>> bin(4294966528)
'0b11111111111111111111110100000000'
>>> bin(768)
'0b1100000000'
>>> signed2py(4294966528)
-768
>>> decode_float(4294966528)

Traceback (most recent call last):
  File "<pyshell#20>", line 1, in <module>
    decode_float(4294966528)
  File "/media/formans/USB DISK/PythonOberon/oberon/util.py", line 99, in decode_float
    return unpack('>f', pack('>I', signed(f, 32)))[0]
  File "/media/formans/USB DISK/PythonOberon/oberon/util.py", line 84, in signed
    return bint(q)[bits:]
  File "/media/formans/USB DISK/PythonOberon/oberon/util.py", line 135, in __getitem__
    return self._getslice(n)
  File "/media/formans/USB DISK/PythonOberon/oberon/util.py", line 139, in _getslice
    n = s.start - s.stop
TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'
>>> import util
>>> reload(util)
<module 'util' from '/media/formans/USB DISK/PythonOberon/oberon/util.py'>
>>> util.decode_float(4294966528)

Traceback (most recent call last):
  File "<pyshell#23>", line 1, in <module>
    util.decode_float(4294966528)
  File "/media/formans/USB DISK/PythonOberon/oberon/util.py", line 99, in decode_float
    return unpack('>f', pack('>I', signed(f, 32)))[0]
  File "/media/formans/USB DISK/PythonOberon/oberon/util.py", line 84, in signed
    return bint(q)[bits:]
  File "/media/formans/USB DISK/PythonOberon/oberon/util.py", line 135, in __getitem__
    return self._getslice(n)
  File "/media/formans/USB DISK/PythonOberon/oberon/util.py", line 149, in _getslice
    return self._mask(s.stop, n)
  File "/media/formans/USB DISK/PythonOberon/oberon/util.py", line 152, in _mask
    return type(self)(self >> stop & (2**n - 1))
TypeError: unsupported operand type(s) for >>: 'bint' and 'NoneType'
>>> reload(util)
<module 'util' from '/media/formans/USB DISK/PythonOberon/oberon/util.py'>
>>> util.decode_float(4294966528)
nan
>>> bin(py2signed(-768))
'0b11111111111111111111110100000000'
>>> signed2py(f)

Traceback (most recent call last):
  File "<pyshell#27>", line 1, in <module>
    signed2py(f)
  File "/media/formans/USB DISK/PythonOberon/oberon/util.py", line 63, in signed2py
    raise ValueError
ValueError
>>> 0b11111111111111111111111111111111 - 0b1100000000
4294966527
>>> 0b11111111111111111111111111111111 - 0b11111111111111111111110100000000
767
>>> 0b100000000000000000000000000000000 - 0b11111111111111111111110100000000
768
>>> import stuct

Traceback (most recent call last):
  File "<pyshell#31>", line 1, in <module>
    import stuct
ImportError: No module named stuct
>>> import struct
>>> struct.pack('<i', 0b11111111111111111111110100000000)

Traceback (most recent call last):
  File "<pyshell#33>", line 1, in <module>
    struct.pack('<i', 0b11111111111111111111110100000000)
error: 'i' format requires -2147483648 <= number <= 2147483647
>>> struct.pack('<I', 0b11111111111111111111110100000000)
'\x00\xfd\xff\xff'
>>> F = _
>>> F
'\x00\xfd\xff\xff'
>>> struct.unpack('<i', F)
(-768,)
>>> f
-768
>>> g = 0b11111111111111111111110100000000
>>> struct.unpack('<I', struct.pack('<i', g))

Traceback (most recent call last):
  File "<pyshell#40>", line 1, in <module>
    struct.unpack('<I', struct.pack('<i', g))
error: 'i' format requires -2147483648 <= number <= 2147483647
>>> struct.unpack('<i', struct.pack('<I', g))
(-768,)
>>> reload(util)
<module 'util' from '/media/formans/USB DISK/PythonOberon/oberon/util.py'>
>>> util.unsigned_to_signed(4294966528)
-768
>>> util.signed_to_unsigned(-768)
4294966528
>>> ================================ RESTART ================================
>>> 
>>> printout(data)
0x00002d96

Traceback (most recent call last):
  File "<pyshell#45>", line 1, in <module>
    printout(data)
  File "/media/formans/USB DISK/PythonOberon/oberon/delme.py", line 24, in printout
    print addr, dis(instr),
  File "/media/formans/USB DISK/PythonOberon/oberon/assembler.py", line 87, in dis
    IR = bint(n)[32:0]
ValueError: invalid literal for int() with base 10: '0x81100014'
>>> ================================ RESTART ================================
>>> 
0x00002d96 Load R1 <- [R1 + 0x00000014]
0x00002d97 Add R0 <- R0 R1 (u: False)
0x00002d98 Load R1 <- [R14 + 0x00000008]
0x00002d99 Sub R1 <- R1 R0 (u: False)
0x00002d9a BR GE 0x-000000e
0x00002d9b BR T 0x00000002
0x00002d9e Load R0 <- [R14 + 0x00000010]
0x00002d9f BR_link EQ [R12]
0x00002da0 Load R1 <- [R0 + 0x000ffff8]
0x00002da1 Load R1 <- [R1 + 0x00000004]
0x00002da2 Load R13 <- [R12 + 0x0000001c]
>>> ================================ RESTART ================================
>>> 
0x00002d96:   Load R1 <- [R1 + 0x00000014]
0x00002d97:     Add R0 <- R0 R1 (u: False)
0x00002d98:  Load R1 <- [R14 + 0x00000008]
0x00002d99:     Sub R1 <- R1 R0 (u: False)
0x00002d9a:               BR GE 0x-000000e
0x00002d9b:                BR T 0x00000002
0x00002d9e:  Load R0 <- [R14 + 0x00000010]
0x00002d9f:               BR_link EQ [R12]
0x00002da0:   Load R1 <- [R0 + 0x000ffff8]
0x00002da1:   Load R1 <- [R1 + 0x00000004]
0x00002da2: Load R13 <- [R12 + 0x0000001c]
>>> ================================ RESTART ================================
>>> 
0x00002d96: Load R1 <- [R1 + 0x00000014]  
0x00002d97: Add R0 <- R0 R1 (u: False)    
0x00002d98: Load R1 <- [R14 + 0x00000008] 
0x00002d99: Sub R1 <- R1 R0 (u: False)    
0x00002d9a: BR GE 0x-000000e              
0x00002d9b: BR T 0x00000002               
0x00002d9e: Load R0 <- [R14 + 0x00000010] 
0x00002d9f: BR_link EQ [R12]              
0x00002da0: Load R1 <- [R0 + 0x000ffff8]  
0x00002da1: Load R1 <- [R1 + 0x00000004]  
0x00002da2: Load R13 <- [R12 + 0x0000001c]
>>> ================================ RESTART ================================
>>> 
0x00002d96: Load R1 <- [R1 + 0x00000014]   0 531592 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
0x00002d97: Add R0 <- R0 R1 (u: False)     0 768 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
0x00002d98: Load R1 <- [R14 + 0x00000008]  768 768 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
0x00002d99: Sub R1 <- R1 R0 (u: False)     768 0 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
0x00002d9a: BR GE 0x-000000e               768 -768 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
0x00002d9b: BR T 0x00000002                768 -768 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
0x00002d9e: Load R0 <- [R14 + 0x00000010]  768 -768 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
0x00002d9f: BR_link EQ [R12]               531592 -768 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
0x00002da0: Load R1 <- [R0 + 0x000ffff8]   531592 -768 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
0x00002da1: Load R1 <- [R1 + 0x00000004]   531592 0 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
0x00002da2: Load R13 <- [R12 + 0x0000001c] 531592 0 65535 1024 768 0 0 0 0 0 0 71816 32 43952 523988 0x1193c
>>> ================================ RESTART ================================
>>> 
0x00002d96: Load R1 <- [R1 + 0x00000014]   0     531592 65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d97: Add R0 <- R0 R1 (u: False)     0     768   65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d98: Load R1 <- [R14 + 0x00000008]  768   768   65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d99: Sub R1 <- R1 R0 (u: False)     768   0     65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d9a: BR GE 0x-000000e               768   -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d9b: BR T 0x00000002                768   -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d9e: Load R0 <- [R14 + 0x00000010]  768   -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d9f: BR_link EQ [R12]               531592 -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002da0: Load R1 <- [R0 + 0x000ffff8]   531592 -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002da1: Load R1 <- [R1 + 0x00000004]   531592 0     65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002da2: Load R13 <- [R12 + 0x0000001c] 531592 0     65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
>>> 
>>> 
>>> 


>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 

>>> 
>>> ================================ RESTART ================================
>>> 
0x00002d96: Load R1 <- [R1 + 0x00000014]   0     531592 65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d97: Add R0 <- R0 R1 (u: False)     0     768   65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d98: Load R1 <- [R14 + 0x00000008]  768   768   65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d99: Sub R1 <- R1 R0 (u: False)     768   0     65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d9a: BR GE 0x-000000e               768   -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d9b: BR T 0x00000002                768   -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d9e: Load R0 <- [R14 + 0x00000010]  768   -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d9f: BR_link EQ [R12]               531592 -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002da0: Load R1 <- [R0 + 0x000ffff8]   531592 -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002da1: Load R1 <- [R1 + 0x00000004]   531592 0     65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002da2: Load R13 <- [R12 + 0x0000001c] 531592 0     65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
>>> ================================ RESTART ================================
>>> 
0x00002da0: Load R1 <- [R0 + 0x000ffff8]   531592 -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002da1: Load R1 <- [R1 + 0x00000004]   531592 0     65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002da2: Load R13 <- [R12 + 0x0000001c] 531592 0     65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002da3: Add R2 <- R13 0 (u: False, v: False) 531592 0     65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002da4: Sub R3 <- R2 R1 (u: False)     531592 0     43952 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002da5: BR_link NE [R12]               531592 0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00000008: BR T 0x00000c8b                531592 0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523988 0xb698
0x00000c94: Sub R14 <- R14 24 (u: False, v: False) 531592 0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523988 0xb698
0x00000c95: Store R15 -> [R14 + 0x00000000] 531592 0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000c96: Store R0 -> [R14 + 0x00000004] 531592 0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000c97: Store R1 -> [R14 + 0x00000008] 531592 0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000c98: Mov R0 <- R15                  531592 0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000c99: Store R0 -> [R14 + 0x0000000c] 46744 0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000c9a: Load R0 <- [R14 + 0x0000000c]  46744 0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000c9b: Sub R0 <- R0 4 (u: False, v: False) 46744 0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000c9c: Load R0 <- [R0 + 0x00000000]   46740 0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000c9d: Store R0 -> [R14 + 0x00000010] -653402324 0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000c9e: Load R0 <- [R14 + 0x00000010]  -653402324 0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000c9f: Asr R0 <- R0 4 (u: False, v: False) -653402324 0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000ca0: And R0 <- R0 15 (u: False, v: False) -40837646 0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000ca1: Store R0 -> [R14 + 0x00000014] 2     0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000ca2: Load R0 <- [R14 + 0x00000014]  2     0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000ca3: BR NE 0x00000004               2     0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000ca8: Load R0 <- [R14 + 0x00000014]  2     0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000ca9: Add R0 <- R0 192 (u: False, v: False) 2     0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000caa: Mov R1 <- 0xffffffc4           194   0     43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
0x00000cab: Store R0 -> [R1 + 0x00000000]  194   -60   43952 43952 768   0     0     0     0     0     0     71816 32    43952 523964 0xb698
>>> 531592
531592
>>> hex(531592)
'0x81c88'
>>> hex(531592 + 0x000ffff8)
'0x181c80'
>>> ================================ RESTART ================================
>>> 
0x00002d87: Sub R1 <- R1 R0 (u: False)     640   0     65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d88: BR GE 0x-000000e               640   -640  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d89: Load R0 <- [R14 + 0x0000000c]  640   -640  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d8a: BR_link EQ [R12]               531656 -640  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d8b: Load R0 <- [R0 + 0x00000004]   531656 -640  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d8c: Store R0 -> [R14 + 0x00000010] 531592 -640  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d8d: Load R0 <- [R14 + 0x00000010]  531592 -640  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d8e: BR_link EQ [R12]               531592 -640  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d8f: Load R0 <- [R0 + 0x00000000]   531592 -640  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d90: Store R0 -> [R14 + 0x00000010] 531592 -640  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d91: Load R0 <- [R14 + 0x00000010]  531592 -640  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d92: BR_link EQ [R12]               531592 -640  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d93: Load R1 <- [R14 + 0x00000010]  531592 -640  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d94: BR_link EQ [R12]               531592 531592 65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d95: Load R0 <- [R0 + 0x0000000c]   531592 531592 65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d96: Load R1 <- [R1 + 0x00000014]   0     531592 65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d97: Add R0 <- R0 R1 (u: False)     0     768   65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d98: Load R1 <- [R14 + 0x00000008]  768   768   65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d99: Sub R1 <- R1 R0 (u: False)     768   0     65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d9a: BR GE 0x-000000e               768   -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d9b: BR T 0x00000002                768   -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d9e: Load R0 <- [R14 + 0x00000010]  768   -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002d9f: BR_link EQ [R12]               531592 -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002da0: Load R1 <- [R0 + 0x000ffff8]   531592 -768  65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
0x00002da1: Load R1 <- [R1 + 0x00000004]   531592 0     65535 1024  768   0     0     0     0     0     0     71816 32    43952 523988 0x1193c
>>> 531592 + 0x000ffff8
1580160
>>> hex(1580160)
'0x181c80'
>>> ================================ RESTART ================================
>>> 
LEDs 10000000
LEDs 10000010
  0x3ffffe57 Mov R0 <- R0
  0x3ffffe58 Mov R0 <- R0
  0x3ffffe59 Mov R0 <- R0
  0x3ffffe5a Mov R0 <- R0
  0x3ffffe5b Mov R0 <- R0
  0x3ffffe5c Mov R0 <- R0
  0x3ffffe5d Mov R0 <- R0
  0x3ffffe5e Mov R0 <- R0
  0x3ffffe5f Mov R0 <- R0
  0x3ffffe60 Mov R0 <- R0
> 0x3ffffe61 Mov R0 <- R0
  0x3ffffe62 Mov R0 <- R0
  0x3ffffe63 Mov R0 <- R0
  0x3ffffe64 Mov R0 <- R0
  0x3ffffe65 Mov R0 <- R0
  0x3ffffe66 Mov R0 <- R0
  0x3ffffe67 Mov R0 <- R0
  0x3ffffe68 Mov R0 <- R0
  0x3ffffe69 Mov R0 <- R0
  0x3ffffe6a Mov R0 <- R0
>>> ================================ RESTART ================================
>>> 
LEDs 10000000
LEDs 10000010
LEDs 10000100
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(331)get()
-> word_addr, byte_offset = divmod(addr, 4)
(Pdb) up
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(267)ram_instruction()
-> value = self.ram.get_byte(addr) if self.v else self.ram[addr]
(Pdb) self
<__main__.RISC object at 0x7f2e7e34d310>
(Pdb) self.PC
11680
(Pdb) hex(self.PC)
'0x2da0'
(Pdb) down
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(331)get()
-> word_addr, byte_offset = divmod(addr, 4)
(Pdb) n
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(332)get()
-> assert not byte_offset, repr(addr)
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(333)get()
-> try:
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(334)get()
-> value = self.store[word_addr]
(Pdb) 
KeyError: (395040,)
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(334)get()
-> value = self.store[word_addr]
(Pdb) word_addr
395040
(Pdb) n
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(335)get()
-> except KeyError:
(Pdb) 
> /media/formans/USB DISK/PythonOberon/oberon/risc.py(337)get()
-> value = self.store[word_addr] = 0
(Pdb) hex(word_addr)
'0x60720'
(Pdb) hex(word_addr<<2)
'0x181c80'
(Pdb) 0x000ffff8
1048568
(Pdb) 0x000ffff8>>2
262142
(Pdb) hex(0x000ffff8>>2)
'0x3fffe'
(Pdb) 0x0000abb0
43952
(Pdb) bin(43952)
'0b1010101110110000'
(Pdb) 

  0x2d96 Load R1 <- [R1 + 0x00000014]
  0x2d97 Add R0 <- R0 R1 (u: False)
  0x2d98 Load R1 <- [R14 + 0x00000008]
  0x2d99 Sub R1 <- R1 R0 (u: False)
  0x2d9a BR GE 0x-000000e
  0x2d9b BR T 0x00000002
  0x2d9c Mov R0 <- 0x00000000
  0x2d9d Store R0 -> [R14 + 0x00000010]
  0x2d9e Load R0 <- [R14 + 0x00000010]
  0x2d9f BR_link EQ [R12]
> 0x2da0 Load R1 <- [R0 + 0x000ffff8]
  0x2da1 Load R1 <- [R1 + 0x00000004]
  0x2da2 Load R13 <- [R12 + 0x0000001c]
  0x2da3 Add R2 <- R13 0 (u: False, v: False)
  0x2da4 Sub R3 <- R2 R1 (u: False)
  0x2da5 BR_link NE [R12]
  0x2da6 Load R15 <- [R14 + 0x00000000]
  0x2da7 Add R14 <- R14 20 (u: False, v: False)
  0x2da8 BR T [R15]
  0x2da9 Sub R14 <- R14 8 (u: False, v: False)
>>> 
