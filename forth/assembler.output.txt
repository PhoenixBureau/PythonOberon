0x00000000 line: 199 T_imm(main) 
0x00000028 line: 90     Sub_imm(Rstack, Rstack, 4)  # Rstack -= 4 (in PUSHRSP)
0x0000002c line: 91     Store_word(reg, Rstack)     # reg -> RAM[Rstack] (in PUSHRSP)
0x00000030 line: 211 Add_imm(IP, next_function, 4) 
0x00000034 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x00000038 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x0000003c line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x00000040 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x00000044 line: 221 Mov_imm(Dstack, DATA_STACK) 
0x00000048 line: 222 Mov_imm(Rstack, RETURN_STACK) 
0x0000004c line: 223 Mov_imm(IP, cold_start) 
0x00000050 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x00000054 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x00000058 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x0000005c line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x00000060 line: 235 dw(REPL) 
0x00000064 line: 122     dw(LINK) (in def_)
0x00000068 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x0000006c line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000070 line: 140     dw(DOCOL)  # codeword points to DOCOL colon word mini-interpreter. (in defword)
0x00000074 line: 246 dw(WORD) 
0x00000078 line: 247 dw(FIND) 
0x0000007c line: 249 dw(BRANCH) 
0x00000080 line: 250 dw(s_to_u_32(-12)) 
0x00000084 line: 122     dw(LINK) (in def_)
0x00000088 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x0000008c line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000090 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x00000094 line: 254 Add_imm(Dstack, Dstack, 4)  # drop top of stack 
0x00000098 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x0000009c line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x000000a0 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x000000a4 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x000000a8 line: 122     dw(LINK) (in def_)
0x000000ac line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000000b0 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000000b4 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x000000b8 line: 96     Load_word(reg, Rstack)      # reg <- RAM[Rstack] (in POPRSP)
0x000000bc line: 97     Add_imm(Rstack, Rstack, 4)  # Rstack += 4 (in POPRSP)
0x000000c0 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x000000c4 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x000000c8 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x000000cc line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x000000d0 line: 122     dw(LINK) (in def_)
0x000000d4 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000000d8 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x000000dc line: 264 Load_word(R0, IP)  # Don't run the next word, load it, 
0x000000e0 line: 102     Sub_imm(Dstack, Dstack, 4)  # Dstack -= 4 (in PUSH)
0x000000e4 line: 103     Store_word(reg, Dstack)     # reg -> RAM[Dstack] (in PUSH)
0x000000e8 line: 266 Add_imm(IP, IP, 4)  # then skip it and run the word after it (EXIT). 
0x000000ec line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x000000f0 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x000000f4 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x000000f8 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x000000fc line: 122     dw(LINK) (in def_)
0x00000100 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000104 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000108 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x0000010c line: 108     Load_word(reg, Dstack)      # reg <- RAM[Dstack] (in POP)
0x00000110 line: 109     Add_imm(Dstack, Dstack, 4)  # Dstack += 4 (in POP)
0x00000114 line: 272 Load_word(1, 10) 
0x00000118 line: 273 Store_word(0, 10) 
0x0000011c line: 102     Sub_imm(Dstack, Dstack, 4)  # Dstack -= 4 (in PUSH)
0x00000120 line: 103     Store_word(reg, Dstack)     # reg -> RAM[Dstack] (in PUSH)
0x00000124 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x00000128 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x0000012c line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x00000130 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x00000134 line: 122     dw(LINK) (in def_)
0x00000138 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x0000013c line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x00000140 line: 174     Mov_imm(R1, _KEY) (in busywait_on_serial_ready)
0x00000144 line: 175     T_link(R1) (in busywait_on_serial_ready)
0x00000148 line: 285 Load_word(R0, R1, negative_offset_20(-4))  # serial port is 4 bytes lower. 
0x0000014c line: 102     Sub_imm(Dstack, Dstack, 4)  # Dstack -= 4 (in PUSH)
0x00000150 line: 103     Store_word(reg, Dstack)     # reg -> RAM[Dstack] (in PUSH)
0x00000154 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x00000158 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x0000015c line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x00000160 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x00000164 line: 122     dw(LINK) (in def_)
0x00000168 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x0000016c line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000170 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x00000174 line: 108     Load_word(reg, Dstack)      # reg <- RAM[Dstack] (in POP)
0x00000178 line: 109     Add_imm(Dstack, Dstack, 4)  # Dstack += 4 (in POP)
0x0000017c line: 174     Mov_imm(R1, _KEY) (in busywait_on_serial_ready)
0x00000180 line: 175     T_link(R1) (in busywait_on_serial_ready)
0x00000184 line: 292 Store_word(R0, R1, negative_offset_20(-4))  # serial port is 4 bytes lower. 
0x00000188 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x0000018c line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x00000190 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x00000194 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x00000198 line: 168     Mov_imm(reg, HIGH(word), u=1) (in move_immediate_word_to_register)
0x0000019c line: 169     Ior_imm(reg, reg, LOW(word)) (in move_immediate_word_to_register)
0x000001a0 line: 308 Load_word(R2, R1, 0) 
0x000001a4 line: 309 EQ_imm(negative_offset_24(-8))  # if R2==0 repeat 
0x000001a8 line: 314 T(15)  # return 
0x000001cc line: 122     dw(LINK) (in def_)
0x000001d0 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000001d4 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000001d8 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x000001dc line: 174     Mov_imm(R1, _KEY) (in busywait_on_serial_ready)
0x000001e0 line: 175     T_link(R1) (in busywait_on_serial_ready)
0x000001e4 line: 334 Load_word(R0, R1, negative_offset_20(-4))  # serial port is 4 bytes lower. 
0x000001e8 line: 337 Sub_imm(R2, R0, ord(' ')) 
0x000001ec line: 338 EQ_imm(_word_key)  # then get another char 
0x000001f0 line: 341 Mov_imm(word_pointer, WORD_BUFFER + 1)  # Leave a byte for the length. 
0x000001f4 line: 342 Mov_imm(word_counter, 0) 
0x000001f8 line: 350 Sub_imm(R2, word_counter, 32) 
0x000001fc line: 351 EQ_imm(_word_key)  # try again. 
0x00000200 line: 354 Store_byte(R0, word_pointer) 
0x00000204 line: 355 Add_imm(word_pointer, word_pointer, 1) 
0x00000208 line: 356 Add_imm(word_counter, word_counter, 1) 
0x0000020c line: 174     Mov_imm(R1, _KEY) (in busywait_on_serial_ready)
0x00000210 line: 175     T_link(R1) (in busywait_on_serial_ready)
0x00000214 line: 360 Load_word(R0, R1, negative_offset_20(-4))  # serial port is 4 bytes lower. 
0x00000218 line: 363 Sub_imm(R2, R0, ord(' ')) 
0x0000021c line: 364 NE_imm(_find_length)  # No, keep getting chars to the buffer 
0x00000220 line: 368 Mov_imm(word_pointer, WORD_BUFFER) 
0x00000224 line: 369 Store_byte(word_counter, word_pointer) 
0x00000228 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x0000022c line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x00000230 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x00000234 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x00000238 line: 122     dw(LINK) (in def_)
0x0000023c line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000240 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000244 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x00000248 line: 382 Mov_imm(word_pointer, WORD_BUFFER) 
0x0000024c line: 384 Load_word(word_counter, word_pointer) 
0x00000250 line: 168     Mov_imm(reg, HIGH(word), u=1) (in move_immediate_word_to_register)
0x00000254 line: 169     Ior_imm(reg, reg, LOW(word)) (in move_immediate_word_to_register)
0x00000258 line: 387 And(word_counter, word_counter, R1) 
0x0000025c line: 389 Mov_imm(R0, LATEST_var) 
0x00000260 line: 391 Load_word(R1, R0)  # Load the address of the word's link field 
0x00000264 line: 392 Load_word(R0, R1, 4)  # load a word of the name field. 
0x00000268 line: 393 Sub(R0, R0, word_counter)  # Compare. 
0x0000026c line: 394 NE_imm(_FIND_2)  # If these two words differ then load the next word. 
0x00000270 line: 102     Sub_imm(Dstack, Dstack, 4)  # Dstack -= 4 (in PUSH)
0x00000274 line: 103     Store_word(reg, Dstack)     # reg -> RAM[Dstack] (in PUSH)
0x00000278 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x0000027c line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x00000280 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x00000284 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x00000288 line: 402 Load_word(R0, R1)  # Load the address of the next link field into R0 
0x0000028c line: 403 NE_imm(_FIND_1)  # Check the next word. 
0x00000290 line: 102     Sub_imm(Dstack, Dstack, 4)  # Dstack -= 4 (in PUSH)
0x00000294 line: 103     Store_word(reg, Dstack)     # reg -> RAM[Dstack] (in PUSH)
0x00000298 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x0000029c line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x000002a0 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x000002a4 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x000002a8 line: 122     dw(LINK) (in def_)
0x000002ac line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000002b0 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000002b4 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x000002b8 line: 440 Mov_imm(word_pointer, WORD_BUFFER) 
0x000002bc line: 441 Load_byte(word_counter, word_pointer) 
0x000002c0 line: 442 Mov_imm(R2, 0)  # use R2 as the accumulator for the number's value 
0x000002c4 line: 444 Add_imm(word_pointer, word_pointer, 1)  # Point to first char. 
0x000002c8 line: 445 Load_byte(R0, word_pointer)  # Load it. 
0x000002cc line: 446 Sub_imm(R0, R0, ord('$'))  # Is it a '$'? 
0x000002d0 line: 447 NE_imm(_NUM_fin) 
0x000002d4 line: 450 Sub_imm(word_counter, word_counter, 1)  # we have parsed one '$' char. 
0x000002d8 line: 453 Add_imm(word_pointer, word_pointer, 1)  # Point to next char. 
0x000002dc line: 454 Load_byte(R0, word_pointer)  # Load it. 
0x000002e0 line: 456 Sub_imm(R0, R0, ord('0')) 
0x000002e4 line: 457 LT_imm(_NUM_fin)  # Is its ASCII value lower than '0'? 
0x000002e8 line: 459 Sub_imm(R1, R0, 9)  # Is it 0-9? 
0x000002ec line: 460 LE_imm(_NUM_add)  # It is! 
0x000002f0 line: 466 Sub_imm(R0, R0, 49)  # so now '1'..'6' -> 0..5 
0x000002f4 line: 467 LT_imm(_NUM_fin)  # Its ASCII value is less than 'a', nope out. 
0x000002f8 line: 470 Sub_imm(R1, R0, 5)  # Is it a-f? 
0x000002fc line: 471 GT_imm(_NUM_fin)  # nope, nope out 
0x00000300 line: 473 Add_imm(R0, R0, 10)  # 0..5 -> 10..15 
0x00000304 line: 476 Add( R2, R2, R0)  # Add it to the accumulator. 
0x00000308 line: 478 Sub_imm(word_counter, word_counter, 1)  # we have parsed a digit char. 
0x0000030c line: 479 NE_imm(_NUM_foo)  # More digits? Keep going. 
0x00000310 line: 102     Sub_imm(Dstack, Dstack, 4)  # Dstack -= 4 (in PUSH)
0x00000314 line: 103     Store_word(reg, Dstack)     # reg -> RAM[Dstack] (in PUSH)
0x00000318 line: 102     Sub_imm(Dstack, Dstack, 4)  # Dstack -= 4 (in PUSH)
0x0000031c line: 103     Store_word(reg, Dstack)     # reg -> RAM[Dstack] (in PUSH)
0x00000320 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x00000324 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x00000328 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x0000032c line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x00000330 line: 488 Lsl_imm(R2, R2, 4)  # accumulator *= 16 
0x00000334 line: 489 T_imm(_NUM_hex)  # Go get the next digit. 
0x00000338 line: 122     dw(LINK) (in def_)
0x0000033c line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000340 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000344 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x00000348 line: 500 Mov_imm(R0, HERE__var)  # R0 <- &HERE 
0x0000034c line: 501 Load_word(R0, R0)  # R0 <- ram[HERE] 
0x00000350 line: 503 Mov_imm(R1, LATEST_var)  # R1 <- &LATEST 
0x00000354 line: 504 Load_word(R2, R1)  # R2 <- ram[LATEST] 
0x00000358 line: 505 Store_word(R2, R0)  # value of LATEST -> ram[HERE] 
0x0000035c line: 506 Store_word(R0, R1)  # value of HERE (now dfa for new word) -> ram[LATEST_var] 
0x00000360 line: 507 Add_imm(R0, R0, 4)  # HERE += 4 
0x00000364 line: 511 Mov_imm(word_pointer, WORD_BUFFER) 
0x00000368 line: 512 Load_byte(word_counter, word_pointer) 
0x0000036c line: 513 And_imm(word_counter, word_counter, F_LENMASK) 
0x00000370 line: 514 Asr_imm(word_counter, word_counter, 2)  # How many words? 
0x00000374 line: 518 Load_word(R1, word_pointer)  # Get the word from WORD_BUFFER. 
0x00000378 line: 519 Store_word(R1, R0)  # Store word to HERE. 
0x0000037c line: 520 Add_imm(R0, R0, 4)  # HERE += 4 
0x00000380 line: 521 Sub_imm(word_counter, word_counter, 1) 
0x00000384 line: 522 LT_imm(_CREATE_fin)  # There are no more words. 
0x00000388 line: 524 Add_imm(word_pointer, word_pointer, 4) 
0x0000038c line: 525 T_imm(_CREATE_loop) 
0x00000390 line: 529 Mov_imm(R1, HERE__var)  # R1 <- &HERE 
0x00000394 line: 530 Store_word(R0, R1) 
0x00000398 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x0000039c line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x000003a0 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x000003a4 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x000003a8 line: 122     dw(LINK) (in def_)
0x000003ac line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000003b0 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000003b4 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x000003b8 line: 158     Mov_imm(R0, LABEL_var) (in defvar)
0x000003bc line: 102     Sub_imm(Dstack, Dstack, 4)  # Dstack -= 4 (in PUSH)
0x000003c0 line: 103     Store_word(reg, Dstack)     # reg -> RAM[Dstack] (in PUSH)
0x000003c4 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x000003c8 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x000003cc line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x000003d0 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x000003d4 line: 163     dw(initial) (in defvar)
0x000003d8 line: 122     dw(LINK) (in def_)
0x000003dc line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000003e0 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000003e4 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x000003e8 line: 158     Mov_imm(R0, LABEL_var) (in defvar)
0x000003ec line: 102     Sub_imm(Dstack, Dstack, 4)  # Dstack -= 4 (in PUSH)
0x000003f0 line: 103     Store_word(reg, Dstack)     # reg -> RAM[Dstack] (in PUSH)
0x000003f4 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x000003f8 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x000003fc line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x00000400 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x00000404 line: 163     dw(initial) (in defvar)
0x00000408 line: 122     dw(LINK) (in def_)
0x0000040c line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000410 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000414 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x00000418 line: 158     Mov_imm(R0, LABEL_var) (in defvar)
0x0000041c line: 102     Sub_imm(Dstack, Dstack, 4)  # Dstack -= 4 (in PUSH)
0x00000420 line: 103     Store_word(reg, Dstack)     # reg -> RAM[Dstack] (in PUSH)
0x00000424 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x00000428 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x0000042c line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x00000430 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x00000434 line: 163     dw(initial) (in defvar)
0x00000438 line: 122     dw(LINK) (in def_)
0x0000043c line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000440 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x00000444 line: 108     Load_word(reg, Dstack)      # reg <- RAM[Dstack] (in POP)
0x00000448 line: 109     Add_imm(Dstack, Dstack, 4)  # Dstack += 4 (in POP)
0x0000044c line: 555 Mov_imm(R1, _COMMA) 
0x00000450 line: 556 T_link(R1) 
0x00000454 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x00000458 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x0000045c line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x00000460 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x00000464 line: 560 Mov_imm(R0, HERE__var)  # R0 <- &HERE 
0x00000468 line: 561 Load_word(R1, R0)  # R1 <- ram[&HERE] 
0x0000046c line: 562 Store_word(R2, R1)  # R2 -> ram[HERE] 
0x00000470 line: 563 Add_imm(R1, R1, 4) 
0x00000474 line: 564 Store_word(R1, R0)  # R1+4 -> ram[&HERE] 
0x00000478 line: 565 T(15)  # return 
0x0000047c line: 122     dw(LINK) (in def_)
0x00000480 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000484 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x00000488 line: 575 Mov_imm(R0, STATE_var) 
0x0000048c line: 576 Mov_imm(R1, 0) 
0x00000490 line: 577 Store_word(R1, R0) 
0x00000494 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x00000498 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x0000049c line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x000004a0 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x000004a4 line: 122     dw(LINK) (in def_)
0x000004a8 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000004ac line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x000004b0 line: 581 Mov_imm(R0, STATE_var) 
0x000004b4 line: 582 Mov_imm(R1, 1) 
0x000004b8 line: 583 Store_word(R1, R0) 
0x000004bc line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x000004c0 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x000004c4 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x000004c8 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x000004cc line: 122     dw(LINK) (in def_)
0x000004d0 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000004d4 line: 140     dw(DOCOL)  # codeword points to DOCOL colon word mini-interpreter. (in defword)
0x000004d8 line: 593 dw(WORD)  # "Get the name of the new word" 
0x000004dc line: 594 dw(CREATE)  # "CREATE the dictionary entry / header" 
0x000004e0 line: 595 dw(LIT)  # "Append DOCOL  (the codeword)." 
0x000004e4 line: 596 dw(DOCOL) 
0x000004e8 line: 597 dw(COMMA) 
0x000004ec line: 598 dw(LATEST)  # "Make the word hidden (see below for definition)." 
0x000004f0 line: 599 dw(FETCH) 
0x000004f4 line: 600 dw(HIDDEN) 
0x000004f8 line: 601 dw(RBRAC)  # "Go into compile mode." 
0x000004fc line: 602 dw(EXIT)  # "Return from the function." 
0x00000500 line: 122     dw(LINK) (in def_)
0x00000504 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000508 line: 140     dw(DOCOL)  # codeword points to DOCOL colon word mini-interpreter. (in defword)
0x0000050c line: 611 dw(LIT)  # "Append EXIT (so the word will return)." 
0x00000510 line: 612 dw(EXIT) 
0x00000514 line: 613 dw(COMMA) 
0x00000518 line: 614 dw(LATEST)  # "Toggle hidden flag -- unhide the word (see below for definition)." 
0x0000051c line: 615 dw(FETCH) 
0x00000520 line: 616 dw(HIDDEN) 
0x00000524 line: 617 dw(LBRAC)  # "Go back to IMMEDIATE mode." 
0x00000528 line: 618 dw(EXIT)  # "Return from the function." 
0x0000052c line: 122     dw(LINK) (in def_)
0x00000530 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000534 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000538 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x0000053c line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x00000540 line: 629 Mov_imm(R0, LATEST_var)  # R0 <- &LATEST 
0x00000544 line: 630 Load_word(R1, R0)  # R1 <- ram[LATEST] 
0x00000548 line: 631 Add_imm(R1, R1, 4)  # "Point to name/flags byte." 
0x0000054c line: 632 Load_word(R0, R1) 
0x00000550 line: 633 Xor_imm(R0, R0, F_IMMED) 
0x00000554 line: 634 Store_word(R0, R1) 
0x00000558 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x0000055c line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x00000560 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x00000564 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x00000568 line: 122     dw(LINK) (in def_)
0x0000056c line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000570 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000574 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x00000578 line: 108     Load_word(reg, Dstack)      # reg <- RAM[Dstack] (in POP)
0x0000057c line: 109     Add_imm(Dstack, Dstack, 4)  # Dstack += 4 (in POP)
0x00000580 line: 645 Add_imm(R1, R1, 4)  # "Point to name/flags byte." 
0x00000584 line: 646 Load_word(R0, R1)  # "Toggle the HIDDEN bit." 
0x00000588 line: 647 Xor_imm(R0, R0, F_HIDDEN) 
0x0000058c line: 648 Store_word(R0, R1) 
0x00000590 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x00000594 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x00000598 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x0000059c line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x000005a0 line: 122     dw(LINK) (in def_)
0x000005a4 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000005a8 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x000005ac line: 665 Load_word(R0, IP)  # Get the address of the next codeword. 
0x000005b0 line: 666 Add_imm(IP, IP, 4)  # Skip it. 
0x000005b4 line: 102     Sub_imm(Dstack, Dstack, 4)  # Dstack -= 4 (in PUSH)
0x000005b8 line: 103     Store_word(reg, Dstack)     # reg -> RAM[Dstack] (in PUSH)
0x000005bc line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x000005c0 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x000005c4 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x000005c8 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x000005cc line: 122     dw(LINK) (in def_)
0x000005d0 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000005d4 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000005d8 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x000005dc line: 677 Load_word(R0, IP)  # Get the offset. 
0x000005e0 line: 679 Add(IP, IP, R0)    # IP += offset 
0x000005e4 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x000005e8 line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x000005ec line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x000005f0 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x000005f4 line: 122     dw(LINK) (in def_)
0x000005f8 line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x000005fc line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000600 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x00000604 line: 108     Load_word(reg, Dstack)      # reg <- RAM[Dstack] (in POP)
0x00000608 line: 109     Add_imm(Dstack, Dstack, 4)  # Dstack += 4 (in POP)
0x0000060c line: 690 Add_imm(R0, R0, 0)  # Set condition flags. 
0x00000610 line: 691 NE_imm(BRANCH + 4)  # Non-zero? BRANCH. 
0x00000614 line: 692 Add_imm(IP, IP, 4)  # Zero? Skip offset. 
0x00000618 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x0000061c line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x00000620 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x00000624 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
0x00000628 line: 122     dw(LINK) (in def_)
0x0000062c line: 131         dw((a<<24) + (b<<16) + (c<<8) + d) (in def_)
0x00000630 line: 148     dw(HERE() + 4)  # codeword points to ASM immediately following. (in defcode)
0x00000634 line: 108     Load_word(reg, Dstack)      # reg <- RAM[Dstack] (in POP)
0x00000638 line: 109     Add_imm(Dstack, Dstack, 4)  # Dstack += 4 (in POP)
0x0000063c line: 703 Load_word(R0, R0) 
0x00000640 line: 102     Sub_imm(Dstack, Dstack, 4)  # Dstack -= 4 (in PUSH)
0x00000644 line: 103     Store_word(reg, Dstack)     # reg -> RAM[Dstack] (in PUSH)
0x00000648 line: 82     Load_word(next_function, IP)        # next_function <- RAM[IP] (in NEXT)
0x0000064c line: 83     Load_word(codeword, next_function)  # codeword <- RAM[next_function] (in NEXT)
0x00000650 line: 84     Add_imm(IP, IP, 4)                  # IP += 4 (in NEXT)
0x00000654 line: 85     T(codeword)                         # PC <- RAM[codeword] (in NEXT)
               0x00000 T_imm(0x10)
    _reserved: 0x00004 0x00000000
               0x00008 0x00000000
               0x0000c 0x00000000
               0x00010 0x00000000
               0x00014 0x00000000
               0x00018 0x00000000
               0x0001c 0x00000000
               0x00020 0x00000000
               0x00024 0x00000000
        DOCOL: 0x00028 Sub_imm(12, 12, 0x4, u=False, v=False)
               0x0002c Store_word(14, 12)
               0x00030 Add_imm(14, 3, 0x4, u=False, v=False)
               0x00034 Load_word(3, 14)
               0x00038 Load_word(4, 3)
               0x0003c Add_imm(14, 14, 0x4, u=False, v=False)
               0x00040 T(4)
         main: 0x00044 Mov_imm(10, 0x4000, u=False, v=False)
               0x00048 Mov_imm(12, 0x6000, u=False, v=False)
               0x0004c Mov_imm(14, 0x60, u=False, v=False)
               0x00050 Load_word(3, 14)
               0x00054 Load_word(4, 3)
               0x00058 Add_imm(14, 14, 0x4, u=False, v=False)
               0x0005c T(4)
   cold_start: 0x00060 0x00000070
     REPL_dfa: 0x00064 0x00000000
               0x00068 0x50455204
               0x0006c 0x0000004c
         REPL: 0x00070 0x00000028
               0x00074 0x000001d8
               0x00078 0x00000244
               0x0007c 0x000005d8
               0x00080 0xfffffff4
     DROP_dfa: 0x00084 0x00000064
               0x00088 0x4f524404
               0x0008c 0x00000050
         DROP: 0x00090 0x00000094
               0x00094 Add_imm(10, 10, 0x4, u=False, v=False)
               0x00098 Load_word(3, 14)
               0x0009c Load_word(4, 3)
               0x000a0 Add_imm(14, 14, 0x4, u=False, v=False)
               0x000a4 T(4)
     EXIT_dfa: 0x000a8 0x00000084
               0x000ac 0x49584504
               0x000b0 0x00000054
         EXIT: 0x000b4 0x000000b8
               0x000b8 Load_word(14, 12)
               0x000bc Add_imm(12, 12, 0x4, u=False, v=False)
               0x000c0 Load_word(3, 14)
               0x000c4 Load_word(4, 3)
               0x000c8 Add_imm(14, 14, 0x4, u=False, v=False)
               0x000cc T(4)
      LIT_dfa: 0x000d0 0x000000a8
               0x000d4 0x54494c03
          LIT: 0x000d8 0x000000dc
               0x000dc Load_word(0, 14)
               0x000e0 Sub_imm(10, 10, 0x4, u=False, v=False)
               0x000e4 Store_word(0, 10)
               0x000e8 Add_imm(14, 14, 0x4, u=False, v=False)
               0x000ec Load_word(3, 14)
               0x000f0 Load_word(4, 3)
               0x000f4 Add_imm(14, 14, 0x4, u=False, v=False)
               0x000f8 T(4)
     SWAP_dfa: 0x000fc 0x000000d0
               0x00100 0x41575304
               0x00104 0x00000050
         SWAP: 0x00108 0x0000010c
               0x0010c Load_word(0, 10)
               0x00110 Add_imm(10, 10, 0x4, u=False, v=False)
               0x00114 Load_word(1, 10)
               0x00118 Store_word(0, 10)
               0x0011c Sub_imm(10, 10, 0x4, u=False, v=False)
               0x00120 Store_word(1, 10)
               0x00124 Load_word(3, 14)
               0x00128 Load_word(4, 3)
               0x0012c Add_imm(14, 14, 0x4, u=False, v=False)
               0x00130 T(4)
      KEY_dfa: 0x00134 0x000000fc
               0x00138 0x59454b03
          KEY: 0x0013c 0x00000140
               0x00140 Mov_imm(1, 0x198, u=False, v=False)
               0x00144 T_link(1)
               0x00148 Load_word(0, 1, offset=0xffffc)
               0x0014c Sub_imm(10, 10, 0x4, u=False, v=False)
               0x00150 Store_word(0, 10)
               0x00154 Load_word(3, 14)
               0x00158 Load_word(4, 3)
               0x0015c Add_imm(14, 14, 0x4, u=False, v=False)
               0x00160 T(4)
     EMIT_dfa: 0x00164 0x00000134
               0x00168 0x494d4504
               0x0016c 0x00000054
         EMIT: 0x00170 0x00000174
               0x00174 Load_word(0, 10)
               0x00178 Add_imm(10, 10, 0x4, u=False, v=False)
               0x0017c Mov_imm(1, 0x198, u=False, v=False)
               0x00180 T_link(1)
               0x00184 Store_word(0, 1, offset=0xffffc)
               0x00188 Load_word(3, 14)
               0x0018c Load_word(4, 3)
               0x00190 Add_imm(14, 14, 0x4, u=False, v=False)
               0x00194 T(4)
         _KEY: 0x00198 Mov_imm(1, 0xffff, u=True, v=False)
               0x0019c Ior_imm(1, 1, 0xffcc, u=False, v=False)
               0x001a0 Load_word(2, 1)
               0x001a4 EQ_imm(0x3fff94)
               0x001a8 T(15)
  WORD_BUFFER: 0x001ac 0x00000000
               0x001b0 0x00000000
               0x001b4 0x00000000
               0x001b8 0x00000000
               0x001bc 0x00000000
               0x001c0 0x00000000
               0x001c4 0x00000000
               0x001c8 0x00000000
     WORD_dfa: 0x001cc 0x00000164
               0x001d0 0x524f5704
               0x001d4 0x00000044
         WORD: 0x001d8 0x000001dc
    _word_key: 0x001dc Mov_imm(1, 0x198, u=False, v=False)
               0x001e0 T_link(1)
               0x001e4 Load_word(0, 1, offset=0xffffc)
               0x001e8 Sub_imm(2, 0, 0x20, u=False, v=False)
               0x001ec EQ_imm(0xfffffb)
               0x001f0 Mov_imm(6, 0x1ad, u=False, v=False)
               0x001f4 Mov_imm(5, 0x0, u=False, v=False)
 _find_length: 0x001f8 Sub_imm(2, 5, 0x20, u=False, v=False)
               0x001fc EQ_imm(0xfffff7)
               0x00200 Store_byte(0, 6)
               0x00204 Add_imm(6, 6, 0x1, u=False, v=False)
               0x00208 Add_imm(5, 5, 0x1, u=False, v=False)
               0x0020c Mov_imm(1, 0x198, u=False, v=False)
               0x00210 T_link(1)
               0x00214 Load_word(0, 1, offset=0xffffc)
               0x00218 Sub_imm(2, 0, 0x20, u=False, v=False)
               0x0021c NE_imm(0xfffff6)
               0x00220 Mov_imm(6, 0x1ac, u=False, v=False)
               0x00224 Store_byte(5, 6)
               0x00228 Load_word(3, 14)
               0x0022c Load_word(4, 3)
               0x00230 Add_imm(14, 14, 0x4, u=False, v=False)
               0x00234 T(4)
     FIND_dfa: 0x00238 0x000001cc
               0x0023c 0x4e494604
               0x00240 0x00000044
         FIND: 0x00244 0x00000248
               0x00248 Mov_imm(6, 0x1ac, u=False, v=False)
               0x0024c Load_word(5, 6)
               0x00250 Mov_imm(1, 0xffff, u=True, v=False)
               0x00254 Ior_imm(1, 1, 0xff3f, u=False, v=False)
               0x00258 And(5, 5, 1, u=False)
               0x0025c Mov_imm(0, 0x404, u=False, v=False)
      _FIND_1: 0x00260 Load_word(1, 0)
               0x00264 Load_word(0, 1, offset=0x4)
               0x00268 Sub(0, 0, 5, u=False)
               0x0026c NE_imm(0x6)
               0x00270 Sub_imm(10, 10, 0x4, u=False, v=False)
               0x00274 Store_word(1, 10)
               0x00278 Load_word(3, 14)
               0x0027c Load_word(4, 3)
               0x00280 Add_imm(14, 14, 0x4, u=False, v=False)
               0x00284 T(4)
      _FIND_2: 0x00288 Load_word(0, 1)
               0x0028c NE_imm(0xfffff4)
               0x00290 Sub_imm(10, 10, 0x4, u=False, v=False)
               0x00294 Store_word(0, 10)
               0x00298 Load_word(3, 14)
               0x0029c Load_word(4, 3)
               0x002a0 Add_imm(14, 14, 0x4, u=False, v=False)
               0x002a4 T(4)
   NUMBER_dfa: 0x002a8 0x00000238
               0x002ac 0x4d554e06
               0x002b0 0x00524542
       NUMBER: 0x002b4 0x000002b8
               0x002b8 Mov_imm(6, 0x1ac, u=False, v=False)
               0x002bc Load_byte(5, 6)
               0x002c0 Mov_imm(2, 0x0, u=False, v=False)
               0x002c4 Add_imm(6, 6, 0x1, u=False, v=False)
               0x002c8 Load_byte(0, 6)
               0x002cc Sub_imm(0, 0, 0x24, u=False, v=False)
               0x002d0 NE_imm(0xf)
               0x002d4 Sub_imm(5, 5, 0x1, u=False, v=False)
     _NUM_hex: 0x002d8 Add_imm(6, 6, 0x1, u=False, v=False)
               0x002dc Load_byte(0, 6)
               0x002e0 Sub_imm(0, 0, 0x30, u=False, v=False)
               0x002e4 LT_imm(0xa)
               0x002e8 Sub_imm(1, 0, 0x9, u=False, v=False)
               0x002ec LE_imm(0x5)
               0x002f0 Sub_imm(0, 0, 0x31, u=False, v=False)
               0x002f4 LT_imm(0x6)
               0x002f8 Sub_imm(1, 0, 0x5, u=False, v=False)
               0x002fc GT_imm(0x4)
               0x00300 Add_imm(0, 0, 0xa, u=False, v=False)
     _NUM_add: 0x00304 Add(2, 2, 0, u=False)
               0x00308 Sub_imm(5, 5, 0x1, u=False, v=False)
               0x0030c NE_imm(0x8)
     _NUM_fin: 0x00310 Sub_imm(10, 10, 0x4, u=False, v=False)
               0x00314 Store_word(2, 10)
               0x00318 Sub_imm(10, 10, 0x4, u=False, v=False)
               0x0031c Store_word(5, 10)
               0x00320 Load_word(3, 14)
               0x00324 Load_word(4, 3)
               0x00328 Add_imm(14, 14, 0x4, u=False, v=False)
               0x0032c T(4)
     _NUM_foo: 0x00330 Lsl_imm(2, 2, 0x4, u=False, v=False)
               0x00334 T_imm(0xffffe8)
   CREATE_dfa: 0x00338 0x000002a8
               0x0033c 0x45524306
               0x00340 0x00455441
       CREATE: 0x00344 0x00000348
               0x00348 Mov_imm(0, 0x3d4, u=False, v=False)
               0x0034c Load_word(0, 0)
               0x00350 Mov_imm(1, 0x404, u=False, v=False)
               0x00354 Load_word(2, 1)
               0x00358 Store_word(2, 0)
               0x0035c Store_word(0, 1)
               0x00360 Add_imm(0, 0, 0x4, u=False, v=False)
               0x00364 Mov_imm(6, 0x1ac, u=False, v=False)
               0x00368 Load_byte(5, 6)
               0x0036c And_imm(5, 5, 0x1f, u=False, v=False)
               0x00370 Asr_imm(5, 5, 0x2, u=False, v=False)
 _CREATE_loop: 0x00374 Load_word(1, 6)
               0x00378 Store_word(1, 0)
               0x0037c Add_imm(0, 0, 0x4, u=False, v=False)
               0x00380 Sub_imm(5, 5, 0x1, u=False, v=False)
               0x00384 LT_imm(0x2)
               0x00388 Add_imm(6, 6, 0x4, u=False, v=False)
               0x0038c T_imm(0xfffff9)
  _CREATE_fin: 0x00390 Mov_imm(1, 0x3d4, u=False, v=False)
               0x00394 Store_word(0, 1)
               0x00398 Load_word(3, 14)
               0x0039c Load_word(4, 3)
               0x003a0 Add_imm(14, 14, 0x4, u=False, v=False)
               0x003a4 T(4)
    HERE__dfa: 0x003a8 0x00000338
               0x003ac 0x52454804
               0x003b0 0x00000045
        HERE_: 0x003b4 0x000003b8
               0x003b8 Mov_imm(0, 0x3d4, u=False, v=False)
               0x003bc Sub_imm(10, 10, 0x4, u=False, v=False)
               0x003c0 Store_word(0, 10)
               0x003c4 Load_word(3, 14)
               0x003c8 Load_word(4, 3)
               0x003cc Add_imm(14, 14, 0x4, u=False, v=False)
               0x003d0 T(4)
    HERE__var: 0x003d4 0x0000052c
   LATEST_dfa: 0x003d8 0x000003a8
               0x003dc 0x54414c06
               0x003e0 0x00545345
       LATEST: 0x003e4 0x000003e8
               0x003e8 Mov_imm(0, 0x404, u=False, v=False)
               0x003ec Sub_imm(10, 10, 0x4, u=False, v=False)
               0x003f0 Store_word(0, 10)
               0x003f4 Load_word(3, 14)
               0x003f8 Load_word(4, 3)
               0x003fc Add_imm(14, 14, 0x4, u=False, v=False)
               0x00400 T(4)
   LATEST_var: 0x00404 0x00000628
    STATE_dfa: 0x00408 0x000003d8
               0x0040c 0x41545305
               0x00410 0x00004554
        STATE: 0x00414 0x00000418
               0x00418 Mov_imm(0, 0x434, u=False, v=False)
               0x0041c Sub_imm(10, 10, 0x4, u=False, v=False)
               0x00420 Store_word(0, 10)
               0x00424 Load_word(3, 14)
               0x00428 Load_word(4, 3)
               0x0042c Add_imm(14, 14, 0x4, u=False, v=False)
               0x00430 T(4)
    STATE_var: 0x00434 0x00000000
    COMMA_dfa: 0x00438 0x00000408
               0x0043c 0x00002c81
        COMMA: 0x00440 0x00000444
               0x00444 Load_word(2, 10)
               0x00448 Add_imm(10, 10, 0x4, u=False, v=False)
               0x0044c Mov_imm(1, 0x464, u=False, v=False)
               0x00450 T_link(1)
               0x00454 Load_word(3, 14)
               0x00458 Load_word(4, 3)
               0x0045c Add_imm(14, 14, 0x4, u=False, v=False)
               0x00460 T(4)
       _COMMA: 0x00464 Mov_imm(0, 0x3d4, u=False, v=False)
               0x00468 Load_word(1, 0)
               0x0046c Store_word(2, 1)
               0x00470 Add_imm(1, 1, 0x4, u=False, v=False)
               0x00474 Store_word(1, 0)
               0x00478 T(15)
    LBRAC_dfa: 0x0047c 0x00000438
               0x00480 0x00005b81
        LBRAC: 0x00484 0x00000488
               0x00488 Mov_imm(0, 0x434, u=False, v=False)
               0x0048c Mov_imm(1, 0x0, u=False, v=False)
               0x00490 Store_word(1, 0)
               0x00494 Load_word(3, 14)
               0x00498 Load_word(4, 3)
               0x0049c Add_imm(14, 14, 0x4, u=False, v=False)
               0x004a0 T(4)
    RBRAC_dfa: 0x004a4 0x0000047c
               0x004a8 0x00005d01
        RBRAC: 0x004ac 0x000004b0
               0x004b0 Mov_imm(0, 0x434, u=False, v=False)
               0x004b4 Mov_imm(1, 0x1, u=False, v=False)
               0x004b8 Store_word(1, 0)
               0x004bc Load_word(3, 14)
               0x004c0 Load_word(4, 3)
               0x004c4 Add_imm(14, 14, 0x4, u=False, v=False)
               0x004c8 T(4)
    COLON_dfa: 0x004cc 0x000004a4
               0x004d0 0x00003a01
        COLON: 0x004d4 0x00000028
               0x004d8 0x000001d8
               0x004dc 0x00000344
               0x004e0 0x000000d8
               0x004e4 0x00000028
               0x004e8 0x00000440
               0x004ec 0x000003e4
               0x004f0 0x00000630
               0x004f4 0x00000574
               0x004f8 0x000004ac
               0x004fc 0x000000b4
SEMICOLON_dfa: 0x00500 0x000004cc
               0x00504 0x00003b81
    SEMICOLON: 0x00508 0x00000028
               0x0050c 0x000000d8
               0x00510 0x000000b4
               0x00514 0x00000440
               0x00518 0x000003e4
               0x0051c 0x00000630
               0x00520 0x00000574
               0x00524 0x00000484
               0x00528 0x000000b4
IMMEDIATE_dfa: 0x0052c 0x00000500
               0x00530 0x4d4d4989
               0x00534 0x41494445
               0x00538 0x00004554
    IMMEDIATE: 0x0053c 0x00000540
               0x00540 Mov_imm(0, 0x404, u=False, v=False)
               0x00544 Load_word(1, 0)
               0x00548 Add_imm(1, 1, 0x4, u=False, v=False)
               0x0054c Load_word(0, 1)
               0x00550 Xor_imm(0, 0, 0x80, u=False, v=False)
               0x00554 Store_word(0, 1)
               0x00558 Load_word(3, 14)
               0x0055c Load_word(4, 3)
               0x00560 Add_imm(14, 14, 0x4, u=False, v=False)
               0x00564 T(4)
   HIDDEN_dfa: 0x00568 0x0000052c
               0x0056c 0x44494806
               0x00570 0x004e4544
       HIDDEN: 0x00574 0x00000578
               0x00578 Load_word(1, 10)
               0x0057c Add_imm(10, 10, 0x4, u=False, v=False)
               0x00580 Add_imm(1, 1, 0x4, u=False, v=False)
               0x00584 Load_word(0, 1)
               0x00588 Xor_imm(0, 0, 0x20, u=False, v=False)
               0x0058c Store_word(0, 1)
               0x00590 Load_word(3, 14)
               0x00594 Load_word(4, 3)
               0x00598 Add_imm(14, 14, 0x4, u=False, v=False)
               0x0059c T(4)
     TICK_dfa: 0x005a0 0x00000568
               0x005a4 0x00002701
         TICK: 0x005a8 0x000005ac
               0x005ac Load_word(0, 14)
               0x005b0 Add_imm(14, 14, 0x4, u=False, v=False)
               0x005b4 Sub_imm(10, 10, 0x4, u=False, v=False)
               0x005b8 Store_word(0, 10)
               0x005bc Load_word(3, 14)
               0x005c0 Load_word(4, 3)
               0x005c4 Add_imm(14, 14, 0x4, u=False, v=False)
               0x005c8 T(4)
   BRANCH_dfa: 0x005cc 0x000005a0
               0x005d0 0x41524206
               0x005d4 0x0048434e
       BRANCH: 0x005d8 0x000005dc
               0x005dc Load_word(0, 14)
               0x005e0 Add(14, 14, 0, u=False)
               0x005e4 Load_word(3, 14)
               0x005e8 Load_word(4, 3)
               0x005ec Add_imm(14, 14, 0x4, u=False, v=False)
               0x005f0 T(4)
  ZBRANCH_dfa: 0x005f4 0x000005cc
               0x005f8 0x52423007
               0x005fc 0x48434e41
      ZBRANCH: 0x00600 0x00000604
               0x00604 Load_word(0, 10)
               0x00608 Add_imm(10, 10, 0x4, u=False, v=False)
               0x0060c Add_imm(0, 0, 0x0, u=False, v=False)
               0x00610 NE_imm(0xfffff2)
               0x00614 Add_imm(14, 14, 0x4, u=False, v=False)
               0x00618 Load_word(3, 14)
               0x0061c Load_word(4, 3)
               0x00620 Add_imm(14, 14, 0x4, u=False, v=False)
               0x00624 T(4)
    FETCH_dfa: 0x00628 0x000005f4
               0x0062c 0x00004001
        FETCH: 0x00630 0x00000634
               0x00634 Load_word(0, 10)
               0x00638 Add_imm(10, 10, 0x4, u=False, v=False)
               0x0063c Load_word(0, 0)
               0x00640 Sub_imm(10, 10, 0x4, u=False, v=False)
               0x00644 Store_word(0, 10)
               0x00648 Load_word(3, 14)
               0x0064c Load_word(4, 3)
               0x00650 Add_imm(14, 14, 0x4, u=False, v=False)
               0x00654 T(4)
