# with open('filling_screen.pickle', 'wb') as f:
#     pickle.dump(w.cpu, f)


# from Tkinter import Toplevel
# from oberon.IDE.widgets import ScrollingListbox

# r = w.register_widgets[0]
# r.set(255<<16)

# T = Toplevel()
# sl = ScrollingListbox(T, w.font)
# sl.pack(expand=True, fill='both')



PC >= 0x12 and PC << 2 < ROMStart

PC >= 0 and PC << 2 < ROMStart
PC == 0x10



ram[R[14]]
ram[R[14]+4]
ram[R[14]+8]
R[1]

PC >= ROMStart and rom[PC-ROMStart]
PC < ROMStart and ram[PC<<2]

from PIL import Image, ImageTk


class Screen(object):

    def __init__(self, root, font):
        self.top = Toplevel(root,)
        # self.canvas = Canvas(self.top, width=1024, height=768)
        # self.canvas.pack()
        self.screen_image = Image.new('1', (100, 50), 1)
        # self.screen_image = Image.open('damnit.gif')
        self.tk_image = ImageTk.PhotoImage(image=self.screen_image)
        self.label = Label(self.top, image=self.tk_image, bd=0, bg='grey')
        self.label.pack()
        # self.bmp_id=self.canvas.create_image(0, 0, image=self.tk_image)

    def putpixel(self, x, y):
        self.screen_image.putpixel((x, y), 0)
        self.tk_image = ImageTk.PhotoImage(image=self.screen_image)
        self.label['image'] = self.tk_image

Doesn't fucking work: updating the image doesn't update what's shown in the Label.
You can save to disk and load from disk and the new pixels will show up.  But just
saving the image doesn't change anything.


from oberon.IDE.widgets import LabelText, RegisterWidget
import tkFont, tkFileDialog, tkMessageBox
from Tkinter import Tk

T = Tk()

font = tkFont.Font(family='Iosevka Term', size=12)

l = LabelText(T, 'Hello', font)
e = RegisterWidget(l, 'roo', font)
l.pack()
l.text.insert('0.0', 'Hello world!\nTuesday!')
w = l.text.window_create('2.0', window=e)

=============================================================


w.watch.text.tag_add('gar', '2.0', '3.0')
w.watch.text.tag_config('gar', background='red')



['.76197960L.72721608L.72721672L.76074696L', '.76197960L.72721608L.72721672L.76074760L', '.76197960L.72721608L.72721672L.84806536L']
('.76197960L.72721608L.72721672L.84806536L', '.76197960L.72721608L.72721672L.76074696L')



from Tkinter import *


class Foo(object):

    def __init__(self, root):
        self.frame = LabelFrame(root, text='LEDs and Switches')
        self.LEDs = []
        self.switches = []
        for column in xrange(8):
            LED_var = IntVar(self.frame)
            LED = Checkbutton(
                self.frame,
                indicatoron=0,
                selectcolor='#8080ff',
                text=str(column),
                variable=LED_var,
            )
            LED.bind('<Button-1>', lambda _: 'break')
            LED.grid(row=0, column=7 - column)

            switch_var = IntVar(self.frame)
            switch = Checkbutton(self.frame, variable=switch_var)
            switch.grid(row=1, column=7 - column)

            self.LEDs.append(LED_var)
            self.switches.append(switch_var)

    def set(self, value):
        for i in range(8):
            self.LEDs[i].set(bool(value & (1 << i)))


t = Tk()
foo = Foo(t)
foo.frame.pack()
# t.mainloop()


From asm:

if __name__ == '__main__':
  mem = {}
  for i, instruction in enumerate((
    Mov_imm(8, 1),
    Mov_imm(1, 1),
    Add(1, 1, 8),
    Lsl_imm(1, 1, 2),
    T_link(1),
    )):
    print instruction, bin(instruction), dis(instruction)
    mem[i] = instruction
