0x3ffffe00 - 0x0000 : BR T 0x151 immediate
0x3ffffe01 - 0x0001 : mov R[0] <- R[0]
0x3ffffe02 - 0x0002 : mov R[0] <- R[0]
0x3ffffe03 - 0x0003 : mov R[0] <- R[0]
0x3ffffe04 - 0x0004 : mov R[0] <- R[0]
0x3ffffe05 - 0x0005 : mov R[0] <- R[0]
0x3ffffe06 - 0x0006 : mov R[0] <- R[0]
0x3ffffe07 - 0x0007 : mov R[0] <- R[0]
                                                          ORP.Compile @  
                                                          ORX.WriteFile BootLoad.rsc 512 "D:/Verilog/RISC5/prom.mem"~

                                                          MODULE* BootLoad;  (*NW 20.10.2013 / PR 4.2.2014; boot from SDHC disk or line*)
                                                            IMPORT SYSTEM;
                                                            (* sw0: init SD; sw1: line|disk*)
                                                            CONST MT = 12; SP = 14; LNK = 15;
                                                              MTOrg = 20H; MemLim = 0E7EF0H; stackOrg = 80000H;
                                                              swi = -60; led = -60; rsData = -56; rsCtrl = -52;
                                                              spiData = -48; spiCtrl = -44;
                                                              CARD0 = 1; SPIFAST = 4;
                                                              FSoffset = 80000H;   (*block offset*)
-----------------------------------------------------------------------------------------------------------
                                                          PROCEDURE RecInt(VAR x: INTEGER);
                                                            VAR z, y, i: INTEGER;
0x3ffffe08 - 0x0008 : sub R[14] <- R[14] 0x14 immediate
0x3ffffe09 - 0x0009 : store R[15] -> ram[R[14]]
0x3ffffe0a - 0x000a : store R[0] -> ram[R[14] + 0x4]
                                                          BEGIN z := 0;  i := 4;
0x3ffffe0b - 0x000b : mov R[0] <- 0x0
0x3ffffe0c - 0x000c : store R[0] -> ram[R[14] + 0x8]
0x3ffffe0d - 0x000d : mov R[0] <- 0x4
0x3ffffe0e - 0x000e : store R[0] -> ram[R[14] + 0x10]
                                                            REPEAT i := i-1;
0x3ffffe0f - 0x000f : load R[0] <- ram[R[14] + 0x10]
0x3ffffe10 - 0x0010 : sub R[0] <- R[0] 0x1 immediate
0x3ffffe11 - 0x0011 : store R[0] -> ram[R[14] + 0x10]
                                                              REPEAT UNTIL SYSTEM.BIT(rsCtrl, 0);
0x3ffffe12 - 0x0012 : mov R[0] <- 0xffffffcc
0x3ffffe13 - 0x0013 : load R[0] <- ram[R[0]]
0x3ffffe14 - 0x0014 : ror R[0] <- R[0] 0x1 immediate
0x3ffffe15 - 0x0015 : BR PL -0x4 immediate
                                                              SYSTEM.GET(rsData, y);
0x3ffffe16 - 0x0016 : mov R[0] <- 0xffffffc8
0x3ffffe17 - 0x0017 : load R[0] <- ram[R[0]]
0x3ffffe18 - 0x0018 : store R[0] -> ram[R[14] + 0xc]
                                                              z := ROR(z+y, 8)
0x3ffffe19 - 0x0019 : load R[0] <- ram[R[14] + 0x8]
0x3ffffe1a - 0x001a : load R[1] <- ram[R[14] + 0xc]
0x3ffffe1b - 0x001b : add R[0] <- R[0] R[1]
0x3ffffe1c - 0x001c : ror R[0] <- R[0] 0x8 immediate
0x3ffffe1d - 0x001d : store R[0] -> ram[R[14] + 0x8]
                                                            UNTIL i = 0;
0x3ffffe1e - 0x001e : load R[0] <- ram[R[14] + 0x10]
0x3ffffe1f - 0x001f : BR NE -0x11 immediate
                                                            x := z
0x3ffffe20 - 0x0020 : load R[0] <- ram[R[14] + 0x8]
0x3ffffe21 - 0x0021 : load R[1] <- ram[R[14] + 0x4]
0x3ffffe22 - 0x0022 : store R[0] -> ram[R[1]]
                                                          END RecInt;
0x3ffffe23 - 0x0023 : load R[15] <- ram[R[14]]
0x3ffffe24 - 0x0024 : add R[14] <- R[14] 0x14 immediate
0x3ffffe25 - 0x0025 : BR T R[15]
-----------------------------------------------------------------------------------------------------------
                                                          PROCEDURE LoadFromLine;
                                                            VAR len, adr, dat: INTEGER;
0x3ffffe26 - 0x0026 : sub R[14] <- R[14] 0x10 immediate
0x3ffffe27 - 0x0027 : store R[15] -> ram[R[14]]
0x3ffffe28 - 0x0028 : add R[0] <- R[14] 0x4 immediate
                                                          BEGIN
                                                            RecInt(len);
0x3ffffe29 - 0x0029 : BR T -0x22 immediate  and R[15]<-PC+1
                                                            WHILE len > 0 DO
0x3ffffe2a - 0x002a : load R[0] <- ram[R[14] + 0x4]
0x3ffffe2b - 0x002b : sub R[0] <- R[0] 0x0 immediate
0x3ffffe2c - 0x002c : BR LE 0x12 immediate
                                                              RecInt(adr);
0x3ffffe2d - 0x002d : add R[0] <- R[14] 0x8 immediate
0x3ffffe2e - 0x002e : BR T -0x27 immediate  and R[15]<-PC+1
                                                              REPEAT
                                                                RecInt(dat);
0x3ffffe2f - 0x002f : add R[0] <- R[14] 0xc immediate
0x3ffffe30 - 0x0030 : BR T -0x29 immediate  and R[15]<-PC+1
                                                                SYSTEM.PUT(adr, dat);
0x3ffffe31 - 0x0031 : load R[0] <- ram[R[14] + 0x8]
0x3ffffe32 - 0x0032 : load R[1] <- ram[R[14] + 0xc]
0x3ffffe33 - 0x0033 : store R[1] -> ram[R[0]]
                                                                adr := adr + 4;
0x3ffffe34 - 0x0034 : load R[0] <- ram[R[14] + 0x8]
0x3ffffe35 - 0x0035 : add R[0] <- R[0] 0x4 immediate
0x3ffffe36 - 0x0036 : store R[0] -> ram[R[14] + 0x8]
                                                                len := len - 4
0x3ffffe37 - 0x0037 : load R[0] <- ram[R[14] + 0x4]
0x3ffffe38 - 0x0038 : sub R[0] <- R[0] 0x4 immediate
0x3ffffe39 - 0x0039 : store R[0] -> ram[R[14] + 0x4]
                                                              UNTIL len = 0;
0x3ffffe3a - 0x003a : load R[0] <- ram[R[14] + 0x4]
0x3ffffe3b - 0x003b : BR NE -0xd immediate
                                                              RecInt(len)
0x3ffffe3c - 0x003c : add R[0] <- R[14] 0x4 immediate
0x3ffffe3d - 0x003d : BR T -0x36 immediate  and R[15] <- PC + 1
                                                            END
0x3ffffe3e - 0x003e : BR T -0x15 immediate
                                                          END LoadFromLine;
0x3ffffe3f - 0x003f : load R[15] <- ram[R[14]]
0x3ffffe40 - 0x0040 : add R[14] <- R[14] 0x10 immediate
0x3ffffe41 - 0x0041 : BR T R[15]
-----------------------------------------------------------------------------------------------------------
                                                        (* ---------- disk ------------*)

                                                          PROCEDURE SPIIdle(n: INTEGER); (*send n FFs slowly with no card selected*)
                                                          BEGIN SYSTEM.PUT(spiCtrl, 0);
                                                            WHILE n > 0 DO DEC(n); SYSTEM.PUT(spiData, -1);
                                                              REPEAT UNTIL SYSTEM.BIT(spiCtrl, 0)
                                                            END
                                                          END SPIIdle;
0x3ffffe42 - 0x0042 : sub R[14] <- R[14] 0x8 immediate
0x3ffffe43 - 0x0043 : store R[15] -> ram[R[14]]
0x3ffffe44 - 0x0044 : store R[0] -> ram[R[14] + 0x4]
0x3ffffe45 - 0x0045 : mov R[0] <- 0xffffffd4
0x3ffffe46 - 0x0046 : mov R[1] <- 0x0
0x3ffffe47 - 0x0047 : store R[1] -> ram[R[0]]
0x3ffffe48 - 0x0048 : load R[0] <- ram[R[14] + 0x4]
0x3ffffe49 - 0x0049 : sub R[0] <- R[0] 0x0 immediate
0x3ffffe4a - 0x004a : BR LE 0xb immediate
0x3ffffe4b - 0x004b : load R[0] <- ram[R[14] + 0x4]
0x3ffffe4c - 0x004c : sub R[0] <- R[0] 0x1 immediate
0x3ffffe4d - 0x004d : store R[0] -> ram[R[14] + 0x4]
0x3ffffe4e - 0x004e : mov R[0] <- 0xffffffd0
0x3ffffe4f - 0x004f : mov R[1] <- 0xffffffff
0x3ffffe50 - 0x0050 : store R[1] -> ram[R[0]]
0x3ffffe51 - 0x0051 : mov R[0] <- 0xffffffd4
0x3ffffe52 - 0x0052 : load R[0] <- ram[R[0]]
0x3ffffe53 - 0x0053 : ror R[0] <- R[0] 0x1 immediate
0x3ffffe54 - 0x0054 : BR PL -0x4 immediate
0x3ffffe55 - 0x0055 : BR T -0xe immediate
0x3ffffe56 - 0x0056 : load R[15] <- ram[R[14]]
0x3ffffe57 - 0x0057 : add R[14] <- R[14] 0x8 immediate
0x3ffffe58 - 0x0058 : BR T R[15]
-----------------------------------------------------------------------------------------------------------
                                                          PROCEDURE SPI(n: INTEGER); (*send&rcv byte slowly with card selected*)
                                                          BEGIN SYSTEM.PUT(spiCtrl, CARD0); SYSTEM.PUT(spiData, n);
                                                            REPEAT UNTIL SYSTEM.BIT(spiCtrl, 0)
                                                          END SPI;
0x3ffffe59 - 0x0059 : sub R[14] <- R[14] 0x8 immediate
0x3ffffe5a - 0x005a : store R[15] -> ram[R[14]]
0x3ffffe5b - 0x005b : store R[0] -> ram[R[14] + 0x4]
0x3ffffe5c - 0x005c : mov R[0] <- 0xffffffd4
0x3ffffe5d - 0x005d : mov R[1] <- 0x1
0x3ffffe5e - 0x005e : store R[1] -> ram[R[0]]
0x3ffffe5f - 0x005f : mov R[0] <- 0xffffffd0
0x3ffffe60 - 0x0060 : load R[1] <- ram[R[14] + 0x4]
0x3ffffe61 - 0x0061 : store R[1] -> ram[R[0]]
0x3ffffe62 - 0x0062 : mov R[0] <- 0xffffffd4
0x3ffffe63 - 0x0063 : load R[0] <- ram[R[0]]
0x3ffffe64 - 0x0064 : ror R[0] <- R[0] 0x1 immediate
0x3ffffe65 - 0x0065 : BR PL -0x4 immediate
0x3ffffe66 - 0x0066 : load R[15] <- ram[R[14]]
0x3ffffe67 - 0x0067 : add R[14] <- R[14] 0x8 immediate
0x3ffffe68 - 0x0068 : BR T R[15]
-----------------------------------------------------------------------------------------------------------
                                                          PROCEDURE SPICmd(n, arg: INTEGER);
                                                            VAR i, data, crc: INTEGER;
                                                          BEGIN (*send cmd*)
                                                            REPEAT SPIIdle(1); SYSTEM.GET(spiData, data) UNTIL data = 255; (*flush while unselected*)
                                                            REPEAT SPI(255); SYSTEM.GET(spiData, data) UNTIL data = 255; (*flush while selected*)
                                                            IF n = 8 THEN crc := 135 ELSIF n = 0 THEN crc := 149 ELSE crc := 255 END;
                                                            SPI(n MOD 64 + 64); (*send command*)
                                                            FOR i := 24 TO 0 BY -8 DO SPI(ROR(arg, i)) END; (*send arg*)
                                                            SPI(crc); i := 32;
                                                            REPEAT SPI(255); SYSTEM.GET(spiData, data); DEC(i) UNTIL (data < 80H) OR (i = 0)
                                                          END SPICmd;
0x3ffffe69 - 0x0069 : sub R[14] <- R[14] 0x18 immediate
0x3ffffe6a - 0x006a : store R[15] -> ram[R[14]]
0x3ffffe6b - 0x006b : store R[0] -> ram[R[14] + 0x4]
0x3ffffe6c - 0x006c : store R[1] -> ram[R[14] + 0x8]
0x3ffffe6d - 0x006d : mov R[0] <- 0x1
0x3ffffe6e - 0x006e : BR T -0x2d immediate  and R[15] <- PC + 1
0x3ffffe6f - 0x006f : mov R[0] <- 0xffffffd0
0x3ffffe70 - 0x0070 : load R[0] <- ram[R[0]]
0x3ffffe71 - 0x0071 : store R[0] -> ram[R[14] + 0x10]
0x3ffffe72 - 0x0072 : load R[0] <- ram[R[14] + 0x10]
0x3ffffe73 - 0x0073 : sub R[0] <- R[0] 0xff immediate
0x3ffffe74 - 0x0074 : BR NE -0x8 immediate
0x3ffffe75 - 0x0075 : mov R[0] <- 0xff
0x3ffffe76 - 0x0076 : BR T -0x1e immediate  and R[15] <- PC + 1
0x3ffffe77 - 0x0077 : mov R[0] <- 0xffffffd0
0x3ffffe78 - 0x0078 : load R[0] <- ram[R[0]]
0x3ffffe79 - 0x0079 : store R[0] -> ram[R[14] + 0x10]
0x3ffffe7a - 0x007a : load R[0] <- ram[R[14] + 0x10]
0x3ffffe7b - 0x007b : sub R[0] <- R[0] 0xff immediate
0x3ffffe7c - 0x007c : BR NE -0x8 immediate
0x3ffffe7d - 0x007d : load R[0] <- ram[R[14] + 0x4]
0x3ffffe7e - 0x007e : sub R[0] <- R[0] 0x8 immediate
0x3ffffe7f - 0x007f : BR NE 0x3 immediate
0x3ffffe80 - 0x0080 : mov R[0] <- 0x87
0x3ffffe81 - 0x0081 : store R[0] -> ram[R[14] + 0x14]
0x3ffffe82 - 0x0082 : BR T 0x7 immediate
0x3ffffe83 - 0x0083 : load R[0] <- ram[R[14] + 0x4]
0x3ffffe84 - 0x0084 : BR NE 0x3 immediate
0x3ffffe85 - 0x0085 : mov R[0] <- 0x95
0x3ffffe86 - 0x0086 : store R[0] -> ram[R[14] + 0x14]
0x3ffffe87 - 0x0087 : BR T 0x2 immediate
0x3ffffe88 - 0x0088 : mov R[0] <- 0xff
0x3ffffe89 - 0x0089 : store R[0] -> ram[R[14] + 0x14]
0x3ffffe8a - 0x008a : load R[0] <- ram[R[14] + 0x4]
0x3ffffe8b - 0x008b : and R[0] <- R[0] 0x3f immediate
0x3ffffe8c - 0x008c : add R[0] <- R[0] 0x40 immediate
0x3ffffe8d - 0x008d : BR T -0x35 immediate  and R[15] <- PC + 1
0x3ffffe8e - 0x008e : mov R[0] <- 0x18
0x3ffffe8f - 0x008f : sub R[1] <- R[0] 0x0 immediate
0x3ffffe90 - 0x0090 : BR LT 0x8 immediate
0x3ffffe91 - 0x0091 : store R[0] -> ram[R[14] + 0xc]
0x3ffffe92 - 0x0092 : load R[0] <- ram[R[14] + 0x8]
0x3ffffe93 - 0x0093 : load R[1] <- ram[R[14] + 0xc]
0x3ffffe94 - 0x0094 : ror R[0] <- R[0] R[1]
0x3ffffe95 - 0x0095 : BR T -0x3d immediate  and R[15] <- PC + 1
0x3ffffe96 - 0x0096 : load R[0] <- ram[R[14] + 0xc]
0x3ffffe97 - 0x0097 : add R[0] <- R[0] 0xfffffff8 immediate
0x3ffffe98 - 0x0098 : BR T -0xa immediate
0x3ffffe99 - 0x0099 : load R[0] <- ram[R[14] + 0x14]
0x3ffffe9a - 0x009a : BR T -0x42 immediate  and R[15] <- PC + 1
0x3ffffe9b - 0x009b : mov R[0] <- 0x20
0x3ffffe9c - 0x009c : store R[0] -> ram[R[14] + 0xc]
0x3ffffe9d - 0x009d : mov R[0] <- 0xff
0x3ffffe9e - 0x009e : BR T -0x46 immediate  and R[15] <- PC + 1
0x3ffffe9f - 0x009f : mov R[0] <- 0xffffffd0
0x3ffffea0 - 0x00a0 : load R[0] <- ram[R[0]]
0x3ffffea1 - 0x00a1 : store R[0] -> ram[R[14] + 0x10]
0x3ffffea2 - 0x00a2 : load R[0] <- ram[R[14] + 0xc]
0x3ffffea3 - 0x00a3 : sub R[0] <- R[0] 0x1 immediate
0x3ffffea4 - 0x00a4 : store R[0] -> ram[R[14] + 0xc]
0x3ffffea5 - 0x00a5 : load R[0] <- ram[R[14] + 0x10]
0x3ffffea6 - 0x00a6 : sub R[0] <- R[0] 0x80 immediate
0x3ffffea7 - 0x00a7 : BR LT 0x2 immediate
0x3ffffea8 - 0x00a8 : load R[0] <- ram[R[14] + 0xc]
0x3ffffea9 - 0x00a9 : BR NE -0xd immediate
0x3ffffeaa - 0x00aa : load R[15] <- ram[R[14]]
0x3ffffeab - 0x00ab : add R[14] <- R[14] 0x18 immediate
0x3ffffeac - 0x00ac : BR T R[15]
-----------------------------------------------------------------------------------------------------------
                                                          PROCEDURE InitSPI;
                                                            VAR res, data: INTEGER;
                                                          BEGIN SPIIdle(9); (*first, idle for at least 80 clks*)
                                                            SPICmd(0, 0); (*CMD0 when card selected, sets MMC SPI mode*)
                                                            SPICmd(8, 1AAH); SPI(-1); SPI(-1); SPI(-1); (*CMD8 for SD cards*)
                                                            REPEAT (*until card becomes ready*)
                                                              (*ACMD41, optionally with high-capacity (HCS) bit set, starts init*)
                                                              SPICmd(55, 0); (*APP cmd follows*)
                                                              SPICmd(41, LSL(1(*HCS*), 30));
                                                              SYSTEM.GET(spiData, res);
                                                              SPI(-1); SPI(-1); SPI(-1); (*flush response*)
                                                              SPIIdle(10000)
                                                            UNTIL res = 0;
                                                            (*CMD16 set block size as a precaution (should default)*)
                                                            SPICmd(16, 512); SPIIdle(1)
                                                          END InitSPI;
0x3ffffead - 0x00ad : sub R[14] <- R[14] 0xc immediate
0x3ffffeae - 0x00ae : store R[15] -> ram[R[14]]
0x3ffffeaf - 0x00af : mov R[0] <- 0x9
0x3ffffeb0 - 0x00b0 : BR T -0x6f immediate  and R[15] <- PC + 1
0x3ffffeb1 - 0x00b1 : mov R[0] <- 0x0
0x3ffffeb2 - 0x00b2 : mov R[1] <- 0x0
0x3ffffeb3 - 0x00b3 : BR T -0x4b immediate  and R[15] <- PC + 1
0x3ffffeb4 - 0x00b4 : mov R[0] <- 0x8
0x3ffffeb5 - 0x00b5 : mov R[1] <- 0x1aa
0x3ffffeb6 - 0x00b6 : BR T -0x4e immediate  and R[15] <- PC + 1
0x3ffffeb7 - 0x00b7 : mov R[0] <- 0xffffffff
0x3ffffeb8 - 0x00b8 : BR T -0x60 immediate  and R[15] <- PC + 1
0x3ffffeb9 - 0x00b9 : mov R[0] <- 0xffffffff
0x3ffffeba - 0x00ba : BR T -0x62 immediate  and R[15] <- PC + 1
0x3ffffebb - 0x00bb : mov R[0] <- 0xffffffff
0x3ffffebc - 0x00bc : BR T -0x64 immediate  and R[15] <- PC + 1
0x3ffffebd - 0x00bd : mov R[0] <- 0x37
0x3ffffebe - 0x00be : mov R[1] <- 0x0
0x3ffffebf - 0x00bf : BR T -0x57 immediate  and R[15] <- PC + 1
0x3ffffec0 - 0x00c0 : mov R[0] <- 0x29
0x3ffffec1 - 0x00c1 : mov R[1] <- 0x1
0x3ffffec2 - 0x00c2 : lsl R[1] <- R[1] 0x1e immediate
0x3ffffec3 - 0x00c3 : BR T -0x5b immediate  and R[15] <- PC + 1
0x3ffffec4 - 0x00c4 : mov R[0] <- 0xffffffd0
0x3ffffec5 - 0x00c5 : load R[0] <- ram[R[0]]
0x3ffffec6 - 0x00c6 : store R[0] -> ram[R[14] + 0x4]
0x3ffffec7 - 0x00c7 : mov R[0] <- 0xffffffff
0x3ffffec8 - 0x00c8 : BR T -0x70 immediate  and R[15] <- PC + 1
0x3ffffec9 - 0x00c9 : mov R[0] <- 0xffffffff
0x3ffffeca - 0x00ca : BR T -0x72 immediate  and R[15] <- PC + 1
0x3ffffecb - 0x00cb : mov R[0] <- 0xffffffff
0x3ffffecc - 0x00cc : BR T -0x74 immediate  and R[15] <- PC + 1
0x3ffffecd - 0x00cd : mov R[0] <- 0x3
0x3ffffece - 0x00ce : BR T -0x8d immediate  and R[15] <- PC + 1
0x3ffffecf - 0x00cf : load R[0] <- ram[R[14] + 0x4]
0x3ffffed0 - 0x00d0 : BR NE -0x14 immediate
0x3ffffed1 - 0x00d1 : mov R[0] <- 0x10
0x3ffffed2 - 0x00d2 : mov R[1] <- 0x200
0x3ffffed3 - 0x00d3 : BR T -0x6b immediate  and R[15] <- PC + 1
0x3ffffed4 - 0x00d4 : mov R[0] <- 0x1
0x3ffffed5 - 0x00d5 : BR T -0x94 immediate  and R[15] <- PC + 1
0x3ffffed6 - 0x00d6 : load R[15] <- ram[R[14]]
0x3ffffed7 - 0x00d7 : add R[14] <- R[14] 0xc immediate
0x3ffffed8 - 0x00d8 : BR T R[15]
-----------------------------------------------------------------------------------------------------------
                                                          PROCEDURE SDShift(VAR n: INTEGER);
                                                            VAR data: INTEGER;
0x3ffffed9 - 0x00d9 : sub R[14] <- R[14] 0xc immediate
0x3ffffeda - 0x00da : store R[15] -> ram[R[14]]
0x3ffffedb - 0x00db : store R[0] -> ram[R[14] + 0x4]
                                                          BEGIN
                                                            SPICmd(58, 0);  (*CMD58 get card capacity bit*)
0x3ffffedc - 0x00dc : mov R[0] <- 0x3a
0x3ffffedd - 0x00dd : mov R[1] <- 0x0
0x3ffffede - 0x00de : BR T -0x76 immediate  and R[15] <- PC + 1
                                                            SYSTEM.GET(spiData, data);
0x3ffffedf - 0x00df : mov R[0] <- 0xffffffd0
0x3ffffee0 - 0x00e0 : load R[0] <- ram[R[0]]
0x3ffffee1 - 0x00e1 : store R[0] -> ram[R[14] + 0x8]
                                                            SPI(-1);
0x3ffffee2 - 0x00e2 : mov R[0] <- 0xffffffff
0x3ffffee3 - 0x00e3 : BR T -0x8b immediate  and R[15] <- PC + 1
                                                            IF (data # 0) OR ~SYSTEM.BIT(spiData, 6) THEN
0x3ffffee4 - 0x00e4 : load R[0] <- ram[R[14] + 0x8]
0x3ffffee5 - 0x00e5 : BR NE 0x4 immediate
0x3ffffee6 - 0x00e6 : mov R[0] <- 0xffffffd0
0x3ffffee7 - 0x00e7 : load R[0] <- ram[R[0]]
0x3ffffee8 - 0x00e8 : ror R[0] <- R[0] 0x7 immediate
0x3ffffee9 - 0x00e9 : BR MI 0x5 immediate
                                                              n := n * 512
0x3ffffeea - 0x00ea : load R[0] <- ram[R[14] + 0x4]
0x3ffffeeb - 0x00eb : load R[0] <- ram[R[0]]
0x3ffffeec - 0x00ec : lsl R[0] <- R[0] 0x9 immediate
0x3ffffeed - 0x00ed : load R[1] <- ram[R[14] + 0x4]
0x3ffffeee - 0x00ee : store R[0] -> ram[R[1]]
                                                            END;  (*non-SDHC card*)
                                                            SPI(-1);
0x3ffffeef - 0x00ef : mov R[0] <- 0xffffffff
0x3ffffef0 - 0x00f0 : BR T -0x98 immediate  and R[15] <- PC + 1
                                                            SPI(-1);
0x3ffffef1 - 0x00f1 : mov R[0] <- 0xffffffff
0x3ffffef2 - 0x00f2 : BR T -0x9a immediate  and R[15] <- PC + 1
                                                            SPIIdle(1)  (*flush response*)
0x3ffffef3 - 0x00f3 : mov R[0] <- 0x1
0x3ffffef4 - 0x00f4 : BR T -0xb3 immediate  and R[15] <- PC + 1
                                                          END SDShift;
0x3ffffef5 - 0x00f5 : load R[15] <- ram[R[14]]
0x3ffffef6 - 0x00f6 : add R[14] <- R[14] 0xc immediate
0x3ffffef7 - 0x00f7 : BR T R[15]
-----------------------------------------------------------------------------------------------------------
                                                          PROCEDURE ReadSD(src, dst: INTEGER);
                                                            VAR i, data: INTEGER;
0x3ffffef8 - 0x00f8 : sub R[14] <- R[14] 0x14 immediate
0x3ffffef9 - 0x00f9 : store R[15] -> ram[R[14]]
                                                          BEGIN
                                                            SDShift(src);
0x3ffffefa - 0x00fa : store R[0] -> ram[R[14] + 0x4]
0x3ffffefb - 0x00fb : store R[1] -> ram[R[14] + 0x8]
0x3ffffefc - 0x00fc : add R[0] <- R[14] 0x4 immediate
0x3ffffefd - 0x00fd : BR T -0x25 immediate  and R[15] <- PC + 1
                                                            SPICmd(17, src); (*CMD17 read one block*)
0x3ffffefe - 0x00fe : mov R[0] <- 0x11
0x3ffffeff - 0x00ff : load R[1] <- ram[R[14] + 0x4]
0x3fffff00 - 0x0100 : BR T -0x98 immediate  and R[15] <- PC + 1
                                                            i := 0; (*wait for start data marker*)
0x3fffff01 - 0x0101 : mov R[0] <- 0x0
0x3fffff02 - 0x0102 : store R[0] -> ram[R[14] + 0xc]
                                                            REPEAT
                                                              SPI(-1);
0x3fffff03 - 0x0103 : mov R[0] <- 0xffffffff
0x3fffff04 - 0x0104 : BR T -0xac immediate  and R[15] <- PC + 1
                                                              SYSTEM.GET(spiData, data);
0x3fffff05 - 0x0105 : mov R[0] <- 0xffffffd0
0x3fffff06 - 0x0106 : load R[0] <- ram[R[0]]
0x3fffff07 - 0x0107 : store R[0] -> ram[R[14] + 0x10]
                                                              INC(i)
0x3fffff08 - 0x0108 : load R[0] <- ram[R[14] + 0xc]
0x3fffff09 - 0x0109 : add R[0] <- R[0] 0x1 immediate
0x3fffff0a - 0x010a : store R[0] -> ram[R[14] + 0xc]
                                                            UNTIL data = 254;
0x3fffff0b - 0x010b : load R[0] <- ram[R[14] + 0x10]
0x3fffff0c - 0x010c : sub R[0] <- R[0] 0xfe immediate
0x3fffff0d - 0x010d : BR NE -0xb immediate
                                                            SYSTEM.PUT(spiCtrl, SPIFAST + CARD0);
0x3fffff0e - 0x010e : mov R[0] <- 0xffffffd4
0x3fffff0f - 0x010f : mov R[1] <- 0x5
0x3fffff10 - 0x0110 : store R[1] -> ram[R[0]]
                                                            FOR i := 0 TO 508 BY 4 DO
0x3fffff11 - 0x0111 : mov R[0] <- 0x0
0x3fffff12 - 0x0112 : sub R[1] <- R[0] 0x1fc immediate
0x3fffff13 - 0x0113 : BR GT 0x14 immediate
0x3fffff14 - 0x0114 : store R[0] -> ram[R[14] + 0xc]
                                                              SYSTEM.PUT(spiData, -1);
0x3fffff15 - 0x0115 : mov R[0] <- 0xffffffd0
0x3fffff16 - 0x0116 : mov R[1] <- 0xffffffff
0x3fffff17 - 0x0117 : store R[1] -> ram[R[0]]
                                                              REPEAT UNTIL SYSTEM.BIT(spiCtrl, 0);
0x3fffff18 - 0x0118 : mov R[0] <- 0xffffffd4
0x3fffff19 - 0x0119 : load R[0] <- ram[R[0]]
0x3fffff1a - 0x011a : ror R[0] <- R[0] 0x1 immediate
0x3fffff1b - 0x011b : BR PL -0x4 immediate
                                                              SYSTEM.GET(spiData, data);
0x3fffff1c - 0x011c : mov R[0] <- 0xffffffd0
0x3fffff1d - 0x011d : load R[0] <- ram[R[0]]
0x3fffff1e - 0x011e : store R[0] -> ram[R[14] + 0x10]
                                                              SYSTEM.PUT(dst, data);
0x3fffff1f - 0x011f : load R[0] <- ram[R[14] + 0x8]
0x3fffff20 - 0x0120 : load R[1] <- ram[R[14] + 0x10]
0x3fffff21 - 0x0121 : store R[1] -> ram[R[0]]
                                                              INC(dst, 4)
0x3fffff22 - 0x0122 : load R[0] <- ram[R[14] + 0x8]
0x3fffff23 - 0x0123 : add R[0] <- R[0] 0x4 immediate
0x3fffff24 - 0x0124 : store R[0] -> ram[R[14] + 0x8]
                                                            END;
0x3fffff25 - 0x0125 : load R[0] <- ram[R[14] + 0xc]
0x3fffff26 - 0x0126 : add R[0] <- R[0] 0x4 immediate
0x3fffff27 - 0x0127 : BR T -0x16 immediate
                                                            SPI(255);
0x3fffff28 - 0x0128 : mov R[0] <- 0xff
0x3fffff29 - 0x0129 : BR T -0xd1 immediate  and R[15] <- PC + 1
                                                            SPI(255);
0x3fffff2a - 0x012a : mov R[0] <- 0xff
0x3fffff2b - 0x012b : BR T -0xd3 immediate  and R[15] <- PC + 1
                                                            SPIIdle(1) (*may be a checksum; deselect card*)
0x3fffff2c - 0x012c : mov R[0] <- 0x1
0x3fffff2d - 0x012d : BR T -0xec immediate  and R[15] <- PC + 1
                                                          END ReadSD;
0x3fffff2e - 0x012e : load R[15] <- ram[R[14]]
0x3fffff2f - 0x012f : add R[14] <- R[14] 0x14 immediate
0x3fffff30 - 0x0130 : BR T R[15]
-----------------------------------------------------------------------------------------------------------
                                                          PROCEDURE LoadFromDisk;
                                                            VAR src, dst, adr, lim: INTEGER;
0x3fffff31 - 0x0131 : sub R[14] <- R[14] 0x14 immediate
0x3fffff32 - 0x0132 : store R[15] -> ram[R[14]]
                                                          BEGIN
                                                            src := FSoffset + 4;   (*start at boot block*)
0x3fffff33 - 0x0133 : mov R[0] <- 0x80000
0x3fffff34 - 0x0134 : ior R[0] <- R[0] 0x4 immediate
0x3fffff35 - 0x0135 : store R[0] -> ram[R[14] + 0x4]
                                                            ReadSD(src, 0);
0x3fffff36 - 0x0136 : load R[0] <- ram[R[14] + 0x4]
0x3fffff37 - 0x0137 : mov R[1] <- 0x0
0x3fffff38 - 0x0138 : BR T -0x41 immediate  and R[15] <- PC + 1
                                                            SYSTEM.GET(16, lim);
0x3fffff39 - 0x0139 : mov R[0] <- 0x10
0x3fffff3a - 0x013a : load R[0] <- ram[R[0]]
0x3fffff3b - 0x013b : store R[0] -> ram[R[14] + 0x10]
                                                            INC(src);
0x3fffff3c - 0x013c : load R[0] <- ram[R[14] + 0x4]
0x3fffff3d - 0x013d : add R[0] <- R[0] 0x1 immediate
0x3fffff3e - 0x013e : store R[0] -> ram[R[14] + 0x4]
                                                            dst := 512;
0x3fffff3f - 0x013f : mov R[0] <- 0x200
0x3fffff40 - 0x0140 : store R[0] -> ram[R[14] + 0x8]
                                                            WHILE dst < lim DO
0x3fffff41 - 0x0141 : load R[0] <- ram[R[14] + 0x8]
0x3fffff42 - 0x0142 : load R[1] <- ram[R[14] + 0x10]
0x3fffff43 - 0x0143 : sub R[0] <- R[0] R[1]
0x3fffff44 - 0x0144 : BR GE 0xa immediate
                                                              ReadSD(src, dst);
0x3fffff45 - 0x0145 : load R[0] <- ram[R[14] + 0x4]
0x3fffff46 - 0x0146 : load R[1] <- ram[R[14] + 0x8]
0x3fffff47 - 0x0147 : BR T -0x50 immediate  and R[15] <- PC + 1
                                                              INC(src);
0x3fffff48 - 0x0148 : load R[0] <- ram[R[14] + 0x4]
0x3fffff49 - 0x0149 : add R[0] <- R[0] 0x1 immediate
0x3fffff4a - 0x014a : store R[0] -> ram[R[14] + 0x4]
                                                              INC(dst, 512)
0x3fffff4b - 0x014b : load R[0] <- ram[R[14] + 0x8]
0x3fffff4c - 0x014c : add R[0] <- R[0] 0x200 immediate
0x3fffff4d - 0x014d : store R[0] -> ram[R[14] + 0x8]
                                                            END
0x3fffff4e - 0x014e : BR T -0xe immediate
                                                          END LoadFromDisk;
0x3fffff4f - 0x014f : load R[15] <- ram[R[14]]
0x3fffff50 - 0x0150 : add R[14] <- R[14] 0x14 immediate
0x3fffff51 - 0x0151 : BR T R[15]
-----------------------------------------------------------------------------------------------------------
                                                        BEGIN
0x3fffff52 - 0x0152 : mov R[13] <- 0x0
0x3fffff53 - 0x0153 : mov R[14] <- 0xffffffc0
                                                          SYSTEM.LDREG(SP, stackOrg);
0x3fffff54 - 0x0154 : mov R[14] <- 0x80000
                                                          SYSTEM.LDREG(MT, MTOrg);
0x3fffff55 - 0x0155 : mov R[12] <- 0x20
                                                          IF SYSTEM.REG(LNK) = 0 THEN (*cold start*)
0x3fffff56 - 0x0156 : mov R[0] <- R[15]
0x3fffff57 - 0x0157 : sub R[0] <- R[0] 0x0 immediate
0x3fffff58 - 0x0158 : BR NE 0x12 immediate
                                                            LED(80H); 
0x3fffff59 - 0x0159 : mov R[0] <- 0x80
0x3fffff5a - 0x015a : mov R[1] <- 0xffffffc4
0x3fffff5b - 0x015b : store R[0] -> ram[R[1]]
                                                            InitSPI;
0x3fffff5c - 0x015c : BR T -0xb0 immediate  and R[15] <- PC + 1
                                                            IF SYSTEM.BIT(swi, 0) THEN
0x3fffff5d - 0x015d : mov R[0] <- 0xffffffc4
0x3fffff5e - 0x015e : load R[0] <- ram[R[0]]
0x3fffff5f - 0x015f : ror R[0] <- R[0] 0x1 immediate
0x3fffff60 - 0x0160 : BR PL 0x5 immediate
                                                              LED(81H);
0x3fffff61 - 0x0161 : mov R[0] <- 0x81
0x3fffff62 - 0x0162 : mov R[1] <- 0xffffffc4
0x3fffff63 - 0x0163 : store R[0] -> ram[R[1]]
                                                              LoadFromLine
0x3fffff64 - 0x0164 : BR T -0x13f immediate  and R[15] <- PC + 1
                                                            ELSE
0x3fffff65 - 0x0165 : BR T 0x4 immediate
                                                              LED(82H);
0x3fffff66 - 0x0166 : mov R[0] <- 0x82
0x3fffff67 - 0x0167 : mov R[1] <- 0xffffffc4
0x3fffff68 - 0x0168 : store R[0] -> ram[R[1]]
                                                              LoadFromDisk
0x3fffff69 - 0x0169 : BR T -0x39 immediate  and R[15] <- PC + 1
                                                            END ;
0x3fffff6a - 0x016a : BR T 0x8 immediate
                                                          ELSIF SYSTEM.BIT(swi, 0) THEN
0x3fffff6b - 0x016b : mov R[0] <- 0xffffffc4
0x3fffff6c - 0x016c : load R[0] <- ram[R[0]]
0x3fffff6d - 0x016d : ror R[0] <- R[0] 0x1 immediate
0x3fffff6e - 0x016e : BR PL 0x4 immediate
                                                            LED(81H);
0x3fffff6f - 0x016f : mov R[0] <- 0x81
0x3fffff70 - 0x0170 : mov R[1] <- 0xffffffc4
0x3fffff71 - 0x0171 : store R[0] -> ram[R[1]]
                                                            LoadFromLine
0x3fffff72 - 0x0172 : BR T -0x14d immediate  and R[15] <- PC + 1
                                                          END ;
                                                          SYSTEM.PUT(12, MemLim);
0x3fffff73 - 0x0173 : mov R[0] <- 0xc
0x3fffff74 - 0x0174 : mov R[1] <- 0xe0000
0x3fffff75 - 0x0175 : ior R[1] <- R[1] 0x7ef0 immediate
0x3fffff76 - 0x0176 : store R[1] -> ram[R[0]]
                                                          SYSTEM.PUT(24, stackOrg);
0x3fffff77 - 0x0177 : mov R[0] <- 0x18
0x3fffff78 - 0x0178 : mov R[1] <- 0x80000
0x3fffff79 - 0x0179 : store R[1] -> ram[R[0]]
                                                          LED(84H)
0x3fffff7a - 0x017a : mov R[0] <- 0x84
0x3fffff7b - 0x017b : mov R[1] <- 0xffffffc4
0x3fffff7c - 0x017c : store R[0] -> ram[R[1]]
                                                        END BootLoad.
0x3fffff7d - 0x017d : mov R[0] <- 0x0
0x3fffff7e - 0x017e : BR T R[0] 
