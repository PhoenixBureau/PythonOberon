M O D U L E  ('MODULE', 'MODULE', 0, 0.0, 0, '')
 O R S ;(31, 'ORS', 0, 0.0, 0, '')
  (52, 'ORS', 0, 0.0, 0, '')
 ( *   N W   1 9 . 9 . 9 3   /   1 0 . 1 0 . 2 0 1 3     S c a n n e r   i n   O b e r o n - 0 7 * ) 
(1, 'ORS', 0, 0.0, 0, '')
    I M P O R T  ('IMPORT', 'IMPORT', 0, 0.0, 0, '')
 S Y S T E M ,(31, 'SYSTEM', 0, 0.0, 0, '')
  (40, 'SYSTEM', 0, 0.0, 0, '')
 T e x t s ,(31, 'Texts', 0, 0.0, 0, '')
  (40, 'Texts', 0, 0.0, 0, '')
 O b e r o n ;(31, 'Oberon', 0, 0.0, 0, '')
(52, 'Oberon', 0, 0.0, 0, '')


( *   O b e r o n   S c a n n e r   d o e s   l e x i c a l   a n a l y s i s .   I n p u t   i s   O b e r o n - T e x t ,   o u t p u t   i s 
    s e q u e n c e   o f   s y m b o l s ,   i . e   i d e n t i f i e r s ,   n u m b e r s ,   s t r i n g s ,   a n d   s p e c i a l   s y m b o l s . 
    R e c o g n i s e s   a l l   O b e r o n   k e y w o r d s   a n d   s k i p s   c o m m e n t s .   T h e   k e y w o r d s   a r e 
    r e c o r d e d   i n   a   t a b l e . 
    G e t ( s y m )   d e l i v e r s   n e x t   s y m b o l   f r o m   i n p u t   t e x t   w i t h   R e a d e r   R . 
    M a r k ( m s g )   r e c o r d s   e r r o r   a n d   d e l i v e r s   e r r o r   m e s s a g e   w i t h   W r i t e r   W . 
    I f   G e t   d e l i v e r s   i d e n t ,   t h e n   t h e   i d e n t i f i e r   ( a   s t r i n g )   i s   i n   v a r i a b l e   i d ,   i f   i n t   o r   c h a r 
    i n   i v a l ,   i f   r e a l   i n   r v a l ,   a n d   i f   s t r i n g   i n   s t r   ( a n d   s l e n )   * ) 
(1, 'Oberon', 0, 0.0, 0, '')
    
    C O N S T  ('CONST', 'CONST', 0, 0.0, 0, '')
 I d L e n *(31, 'IdLen', 0, 0.0, 0, '')
  (1, 'IdLen', 0, 0.0, 0, '')
 =  (9, 'IdLen', 0, 0.0, 0, '')
 3 2 ;(9, 'IdLen', 32, 0.0, 0, '')
  (52, 'IdLen', 32, 0.0, 0, '')
 W S  (31, 'WS', 32, 0.0, 0, '')
 =  (9, 'WS', 32, 0.0, 0, '')
 4 ;(9, 'WS', 4, 0.0, 0, '')
  (52, 'WS', 4, 0.0, 0, '')
 ( * W o r d   s i z e * ) 
(1, 'WS', 4, 0.0, 0, '')
        N K W  (31, 'NKW', 4, 0.0, 0, '')
 =  (9, 'NKW', 4, 0.0, 0, '')
 3 4 ;(9, 'NKW', 34, 0.0, 0, '')
  (52, 'NKW', 34, 0.0, 0, '')
   ( * n o f   k e y w o r d s * ) 
(1, 'NKW', 34, 0.0, 0, '')
        m a x E x p  (31, 'maxExp', 34, 0.0, 0, '')
 =  (9, 'maxExp', 34, 0.0, 0, '')
 3 8 ;(9, 'maxExp', 38, 0.0, 0, '')
  (52, 'maxExp', 38, 0.0, 0, '')
 s t r i n g B u f S i z e  (31, 'stringBufSize', 38, 0.0, 0, '')
 =  (9, 'stringBufSize', 38, 0.0, 0, '')
 2 5 6 ;(9, 'stringBufSize', 256, 0.0, 0, '')
(52, 'stringBufSize', 256, 0.0, 0, '')

    
        ( * l e x i c a l   s y m b o l s * ) 
(1, 'stringBufSize', 256, 0.0, 0, '')
        n u l l  (31, 'null', 256, 0.0, 0, '')
 =  (9, 'null', 256, 0.0, 0, '')
 0 ;(9, 'null', 0, 0.0, 0, '')
  (52, 'null', 0, 0.0, 0, '')
 t i m e s *(31, 'times', 0, 0.0, 0, '')
  (1, 'times', 0, 0.0, 0, '')
 =  (9, 'times', 0, 0.0, 0, '')
 1 ;(9, 'times', 1, 0.0, 0, '')
  (52, 'times', 1, 0.0, 0, '')
 r d i v *(31, 'rdiv', 1, 0.0, 0, '')
  (1, 'rdiv', 1, 0.0, 0, '')
 =  (9, 'rdiv', 1, 0.0, 0, '')
 2 ;(9, 'rdiv', 2, 0.0, 0, '')
  (52, 'rdiv', 2, 0.0, 0, '')
 d i v *(31, 'div', 2, 0.0, 0, '')
  (1, 'div', 2, 0.0, 0, '')
 =  (9, 'div', 2, 0.0, 0, '')
 3 ;(9, 'div', 3, 0.0, 0, '')
  (52, 'div', 3, 0.0, 0, '')
 m o d *(31, 'mod', 3, 0.0, 0, '')
  (1, 'mod', 3, 0.0, 0, '')
 =  (9, 'mod', 3, 0.0, 0, '')
 4 ;(9, 'mod', 4, 0.0, 0, '')
(52, 'mod', 4, 0.0, 0, '')

        a n d *(31, 'and', 4, 0.0, 0, '')
  (1, 'and', 4, 0.0, 0, '')
 =  (9, 'and', 4, 0.0, 0, '')
 5 ;(9, 'and', 5, 0.0, 0, '')
  (52, 'and', 5, 0.0, 0, '')
 p l u s *(31, 'plus', 5, 0.0, 0, '')
  (1, 'plus', 5, 0.0, 0, '')
 =  (9, 'plus', 5, 0.0, 0, '')
 6 ;(9, 'plus', 6, 0.0, 0, '')
  (52, 'plus', 6, 0.0, 0, '')
 m i n u s *(31, 'minus', 6, 0.0, 0, '')
  (1, 'minus', 6, 0.0, 0, '')
 =  (9, 'minus', 6, 0.0, 0, '')
 7 ;(9, 'minus', 7, 0.0, 0, '')
  (52, 'minus', 7, 0.0, 0, '')
 o r *(31, 'or', 7, 0.0, 0, '')
  (1, 'or', 7, 0.0, 0, '')
 =  (9, 'or', 7, 0.0, 0, '')
 8 ;(9, 'or', 8, 0.0, 0, '')
  (52, 'or', 8, 0.0, 0, '')
 e q l *(31, 'eql', 8, 0.0, 0, '')
  (1, 'eql', 8, 0.0, 0, '')
 =  (9, 'eql', 8, 0.0, 0, '')
 9 ;(9, 'eql', 9, 0.0, 0, '')
(52, 'eql', 9, 0.0, 0, '')

        n e q *(31, 'neq', 9, 0.0, 0, '')
  (1, 'neq', 9, 0.0, 0, '')
 =  (9, 'neq', 9, 0.0, 0, '')
 1 0 ;(9, 'neq', 10, 0.0, 0, '')
  (52, 'neq', 10, 0.0, 0, '')
 l s s *(31, 'lss', 10, 0.0, 0, '')
  (1, 'lss', 10, 0.0, 0, '')
 =  (9, 'lss', 10, 0.0, 0, '')
 1 1 ;(9, 'lss', 11, 0.0, 0, '')
  (52, 'lss', 11, 0.0, 0, '')
 l e q *(31, 'leq', 11, 0.0, 0, '')
  (1, 'leq', 11, 0.0, 0, '')
 =  (9, 'leq', 11, 0.0, 0, '')
 1 2 ;(9, 'leq', 12, 0.0, 0, '')
  (52, 'leq', 12, 0.0, 0, '')
 g t r *(31, 'gtr', 12, 0.0, 0, '')
  (1, 'gtr', 12, 0.0, 0, '')
 =  (9, 'gtr', 12, 0.0, 0, '')
 1 3 ;(9, 'gtr', 13, 0.0, 0, '')
  (52, 'gtr', 13, 0.0, 0, '')
 g e q *(31, 'geq', 13, 0.0, 0, '')
  (1, 'geq', 13, 0.0, 0, '')
 =  (9, 'geq', 13, 0.0, 0, '')
 1 4 ;(9, 'geq', 14, 0.0, 0, '')
(52, 'geq', 14, 0.0, 0, '')

        i n *(31, 'in', 14, 0.0, 0, '')
  (1, 'in', 14, 0.0, 0, '')
 =  (9, 'in', 14, 0.0, 0, '')
 1 5 ;(9, 'in', 15, 0.0, 0, '')
  (52, 'in', 15, 0.0, 0, '')
 i s *(31, 'is', 15, 0.0, 0, '')
  (1, 'is', 15, 0.0, 0, '')
 =  (9, 'is', 15, 0.0, 0, '')
 1 6 ;(9, 'is', 16, 0.0, 0, '')
  (52, 'is', 16, 0.0, 0, '')
 a r r o w *(31, 'arrow', 16, 0.0, 0, '')
  (1, 'arrow', 16, 0.0, 0, '')
 =  (9, 'arrow', 16, 0.0, 0, '')
 1 7 ;(9, 'arrow', 17, 0.0, 0, '')
  (52, 'arrow', 17, 0.0, 0, '')
 p e r i o d *(31, 'period', 17, 0.0, 0, '')
  (1, 'period', 17, 0.0, 0, '')
 =  (9, 'period', 17, 0.0, 0, '')
 1 8 ;(9, 'period', 18, 0.0, 0, '')
(52, 'period', 18, 0.0, 0, '')

        c h a r *(31, 'char', 18, 0.0, 0, '')
  (1, 'char', 18, 0.0, 0, '')
 =  (9, 'char', 18, 0.0, 0, '')
 2 0 ;(9, 'char', 20, 0.0, 0, '')
  (52, 'char', 20, 0.0, 0, '')
 i n t *(31, 'int', 20, 0.0, 0, '')
  (1, 'int', 20, 0.0, 0, '')
 =  (9, 'int', 20, 0.0, 0, '')
 2 1 ;(9, 'int', 21, 0.0, 0, '')
  (52, 'int', 21, 0.0, 0, '')
 r e a l *(31, 'real', 21, 0.0, 0, '')
  (1, 'real', 21, 0.0, 0, '')
 =  (9, 'real', 21, 0.0, 0, '')
 2 2 ;(9, 'real', 22, 0.0, 0, '')
  (52, 'real', 22, 0.0, 0, '')
 f a l s e *(31, 'false', 22, 0.0, 0, '')
  (1, 'false', 22, 0.0, 0, '')
 =  (9, 'false', 22, 0.0, 0, '')
 2 3 ;(9, 'false', 23, 0.0, 0, '')
  (52, 'false', 23, 0.0, 0, '')
 t r u e *(31, 'true', 23, 0.0, 0, '')
  (1, 'true', 23, 0.0, 0, '')
 =  (9, 'true', 23, 0.0, 0, '')
 2 4 ;(9, 'true', 24, 0.0, 0, '')
(52, 'true', 24, 0.0, 0, '')

        n i l *(31, 'nil', 24, 0.0, 0, '')
  (1, 'nil', 24, 0.0, 0, '')
 =  (9, 'nil', 24, 0.0, 0, '')
 2 5 ;(9, 'nil', 25, 0.0, 0, '')
  (52, 'nil', 25, 0.0, 0, '')
 s t r i n g *(31, 'string', 25, 0.0, 0, '')
  (1, 'string', 25, 0.0, 0, '')
 =  (9, 'string', 25, 0.0, 0, '')
 2 6 ;(9, 'string', 26, 0.0, 0, '')
  (52, 'string', 26, 0.0, 0, '')
 n o t *(31, 'not', 26, 0.0, 0, '')
  (1, 'not', 26, 0.0, 0, '')
 =  (9, 'not', 26, 0.0, 0, '')
 2 7 ;(9, 'not', 27, 0.0, 0, '')
  (52, 'not', 27, 0.0, 0, '')
 l p a r e n *(31, 'lparen', 27, 0.0, 0, '')
  (1, 'lparen', 27, 0.0, 0, '')
 =  (9, 'lparen', 27, 0.0, 0, '')
 2 8 ;(9, 'lparen', 28, 0.0, 0, '')
  (52, 'lparen', 28, 0.0, 0, '')
 l b r a k *(31, 'lbrak', 28, 0.0, 0, '')
  (1, 'lbrak', 28, 0.0, 0, '')
 =  (9, 'lbrak', 28, 0.0, 0, '')
 2 9 ;(9, 'lbrak', 29, 0.0, 0, '')
(52, 'lbrak', 29, 0.0, 0, '')

        l b r a c e *(31, 'lbrace', 29, 0.0, 0, '')
  (1, 'lbrace', 29, 0.0, 0, '')
 =  (9, 'lbrace', 29, 0.0, 0, '')
 3 0 ;(9, 'lbrace', 30, 0.0, 0, '')
  (52, 'lbrace', 30, 0.0, 0, '')
 i d e n t *(31, 'ident', 30, 0.0, 0, '')
  (1, 'ident', 30, 0.0, 0, '')
 =  (9, 'ident', 30, 0.0, 0, '')
 3 1 ;(9, 'ident', 31, 0.0, 0, '')
(52, 'ident', 31, 0.0, 0, '')

        i f *(31, 'if', 31, 0.0, 0, '')
  (1, 'if', 31, 0.0, 0, '')
 =  (9, 'if', 31, 0.0, 0, '')
 3 2 ;(9, 'if', 32, 0.0, 0, '')
  (52, 'if', 32, 0.0, 0, '')
 w h i l e *(31, 'while', 32, 0.0, 0, '')
  (1, 'while', 32, 0.0, 0, '')
 =  (9, 'while', 32, 0.0, 0, '')
 3 4 ;(9, 'while', 34, 0.0, 0, '')
  (52, 'while', 34, 0.0, 0, '')
 r e p e a t *(31, 'repeat', 34, 0.0, 0, '')
  (1, 'repeat', 34, 0.0, 0, '')
 =  (9, 'repeat', 34, 0.0, 0, '')
 3 5 ;(9, 'repeat', 35, 0.0, 0, '')
  (52, 'repeat', 35, 0.0, 0, '')
 c a s e *(31, 'case', 35, 0.0, 0, '')
  (1, 'case', 35, 0.0, 0, '')
 =  (9, 'case', 35, 0.0, 0, '')
 3 6 ;(9, 'case', 36, 0.0, 0, '')
  (52, 'case', 36, 0.0, 0, '')
 f o r *(31, 'for', 36, 0.0, 0, '')
  (1, 'for', 36, 0.0, 0, '')
 =  (9, 'for', 36, 0.0, 0, '')
 3 7 ;(9, 'for', 37, 0.0, 0, '')
(52, 'for', 37, 0.0, 0, '')

        c o m m a *(31, 'comma', 37, 0.0, 0, '')
  (1, 'comma', 37, 0.0, 0, '')
 =  (9, 'comma', 37, 0.0, 0, '')
 4 0 ;(9, 'comma', 40, 0.0, 0, '')
  (52, 'comma', 40, 0.0, 0, '')
 c o l o n *(31, 'colon', 40, 0.0, 0, '')
  (1, 'colon', 40, 0.0, 0, '')
 =  (9, 'colon', 40, 0.0, 0, '')
 4 1 ;(9, 'colon', 41, 0.0, 0, '')
  (52, 'colon', 41, 0.0, 0, '')
 b e c o m e s *(31, 'becomes', 41, 0.0, 0, '')
  (1, 'becomes', 41, 0.0, 0, '')
 =  (9, 'becomes', 41, 0.0, 0, '')
 4 2 ;(9, 'becomes', 42, 0.0, 0, '')
  (52, 'becomes', 42, 0.0, 0, '')
 u p t o *(31, 'upto', 42, 0.0, 0, '')
  (1, 'upto', 42, 0.0, 0, '')
 =  (9, 'upto', 42, 0.0, 0, '')
 4 3 ;(9, 'upto', 43, 0.0, 0, '')
  (52, 'upto', 43, 0.0, 0, '')
 r p a r e n *(31, 'rparen', 43, 0.0, 0, '')
  (1, 'rparen', 43, 0.0, 0, '')
 =  (9, 'rparen', 43, 0.0, 0, '')
 4 4 ;(9, 'rparen', 44, 0.0, 0, '')
(52, 'rparen', 44, 0.0, 0, '')

        r b r a k *(31, 'rbrak', 44, 0.0, 0, '')
  (1, 'rbrak', 44, 0.0, 0, '')
 =  (9, 'rbrak', 44, 0.0, 0, '')
 4 5 ;(9, 'rbrak', 45, 0.0, 0, '')
  (52, 'rbrak', 45, 0.0, 0, '')
 r b r a c e *(31, 'rbrace', 45, 0.0, 0, '')
  (1, 'rbrace', 45, 0.0, 0, '')
 =  (9, 'rbrace', 45, 0.0, 0, '')
 4 6 ;(9, 'rbrace', 46, 0.0, 0, '')
  (52, 'rbrace', 46, 0.0, 0, '')
 t h e n *(31, 'then', 46, 0.0, 0, '')
  (1, 'then', 46, 0.0, 0, '')
 =  (9, 'then', 46, 0.0, 0, '')
 4 7 ;(9, 'then', 47, 0.0, 0, '')
  (52, 'then', 47, 0.0, 0, '')
 o f *(31, 'of', 47, 0.0, 0, '')
  (1, 'of', 47, 0.0, 0, '')
 =  (9, 'of', 47, 0.0, 0, '')
 4 8 ;(9, 'of', 48, 0.0, 0, '')
  (52, 'of', 48, 0.0, 0, '')
 d o *(31, 'do', 48, 0.0, 0, '')
  (1, 'do', 48, 0.0, 0, '')
 =  (9, 'do', 48, 0.0, 0, '')
 4 9 ;(9, 'do', 49, 0.0, 0, '')
(52, 'do', 49, 0.0, 0, '')

        t o *(31, 'to', 49, 0.0, 0, '')
  (1, 'to', 49, 0.0, 0, '')
 =  (9, 'to', 49, 0.0, 0, '')
 5 0 ;(9, 'to', 50, 0.0, 0, '')
  (52, 'to', 50, 0.0, 0, '')
 b y *(31, 'by', 50, 0.0, 0, '')
  (1, 'by', 50, 0.0, 0, '')
 =  (9, 'by', 50, 0.0, 0, '')
 5 1 ;(9, 'by', 51, 0.0, 0, '')
  (52, 'by', 51, 0.0, 0, '')
 s e m i c o l o n *(31, 'semicolon', 51, 0.0, 0, '')
  (1, 'semicolon', 51, 0.0, 0, '')
 =  (9, 'semicolon', 51, 0.0, 0, '')
 5 2 ;(9, 'semicolon', 52, 0.0, 0, '')
  (52, 'semicolon', 52, 0.0, 0, '')
 e n d *(31, 'end', 52, 0.0, 0, '')
  (1, 'end', 52, 0.0, 0, '')
 =  (9, 'end', 52, 0.0, 0, '')
 5 3 ;(9, 'end', 53, 0.0, 0, '')
  (52, 'end', 53, 0.0, 0, '')
 b a r *(31, 'bar', 53, 0.0, 0, '')
  (1, 'bar', 53, 0.0, 0, '')
 =  (9, 'bar', 53, 0.0, 0, '')
 5 4 ;(9, 'bar', 54, 0.0, 0, '')
(52, 'bar', 54, 0.0, 0, '')

        e l s e *(31, 'else', 54, 0.0, 0, '')
  (1, 'else', 54, 0.0, 0, '')
 =  (9, 'else', 54, 0.0, 0, '')
 5 5 ;(9, 'else', 55, 0.0, 0, '')
  (52, 'else', 55, 0.0, 0, '')
 e l s i f *(31, 'elsif', 55, 0.0, 0, '')
  (1, 'elsif', 55, 0.0, 0, '')
 =  (9, 'elsif', 55, 0.0, 0, '')
 5 6 ;(9, 'elsif', 56, 0.0, 0, '')
  (52, 'elsif', 56, 0.0, 0, '')
 u n t i l *(31, 'until', 56, 0.0, 0, '')
  (1, 'until', 56, 0.0, 0, '')
 =  (9, 'until', 56, 0.0, 0, '')
 5 7 ;(9, 'until', 57, 0.0, 0, '')
  (52, 'until', 57, 0.0, 0, '')
 r e t u r n *(31, 'return', 57, 0.0, 0, '')
  (1, 'return', 57, 0.0, 0, '')
 =  (9, 'return', 57, 0.0, 0, '')
 5 8 ;(9, 'return', 58, 0.0, 0, '')
(52, 'return', 58, 0.0, 0, '')

        a r r a y *(31, 'array', 58, 0.0, 0, '')
  (1, 'array', 58, 0.0, 0, '')
 =  (9, 'array', 58, 0.0, 0, '')
 6 0 ;(9, 'array', 60, 0.0, 0, '')
  (52, 'array', 60, 0.0, 0, '')
 r e c o r d *(31, 'record', 60, 0.0, 0, '')
  (1, 'record', 60, 0.0, 0, '')
 =  (9, 'record', 60, 0.0, 0, '')
 6 1 ;(9, 'record', 61, 0.0, 0, '')
  (52, 'record', 61, 0.0, 0, '')
 p o i n t e r *(31, 'pointer', 61, 0.0, 0, '')
  (1, 'pointer', 61, 0.0, 0, '')
 =  (9, 'pointer', 61, 0.0, 0, '')
 6 2 ;(9, 'pointer', 62, 0.0, 0, '')
  (52, 'pointer', 62, 0.0, 0, '')
 c o n s t *(31, 'const', 62, 0.0, 0, '')
  (1, 'const', 62, 0.0, 0, '')
 =  (9, 'const', 62, 0.0, 0, '')
 6 3 ;(9, 'const', 63, 0.0, 0, '')
  (52, 'const', 63, 0.0, 0, '')
 t y p e *(31, 'type', 63, 0.0, 0, '')
  (1, 'type', 63, 0.0, 0, '')
 =  (9, 'type', 63, 0.0, 0, '')
 6 4 ;(9, 'type', 64, 0.0, 0, '')
(52, 'type', 64, 0.0, 0, '')

        v a r *(31, 'var', 64, 0.0, 0, '')
  (1, 'var', 64, 0.0, 0, '')
 =  (9, 'var', 64, 0.0, 0, '')
 6 5 ;(9, 'var', 65, 0.0, 0, '')
  (52, 'var', 65, 0.0, 0, '')
 p r o c e d u r e *(31, 'procedure', 65, 0.0, 0, '')
  (1, 'procedure', 65, 0.0, 0, '')
 =  (9, 'procedure', 65, 0.0, 0, '')
 6 6 ;(9, 'procedure', 66, 0.0, 0, '')
  (52, 'procedure', 66, 0.0, 0, '')
 b e g i n *(31, 'begin', 66, 0.0, 0, '')
  (1, 'begin', 66, 0.0, 0, '')
 =  (9, 'begin', 66, 0.0, 0, '')
 6 7 ;(9, 'begin', 67, 0.0, 0, '')
  (52, 'begin', 67, 0.0, 0, '')
 i m p o r t *(31, 'import', 67, 0.0, 0, '')
  (1, 'import', 67, 0.0, 0, '')
 =  (9, 'import', 67, 0.0, 0, '')
 6 8 ;(9, 'import', 68, 0.0, 0, '')
  (52, 'import', 68, 0.0, 0, '')
 m o d u l e *(31, 'module', 68, 0.0, 0, '')
  (1, 'module', 68, 0.0, 0, '')
 =  (9, 'module', 68, 0.0, 0, '')
 6 9 ;(9, 'module', 69, 0.0, 0, '')
(52, 'module', 69, 0.0, 0, '')

        e o f  (31, 'eof', 69, 0.0, 0, '')
 =  (9, 'eof', 69, 0.0, 0, '')
 7 0 ;(9, 'eof', 70, 0.0, 0, '')
(52, 'eof', 70, 0.0, 0, '')


    T Y P E  ('TYPE', 'TYPE', 70, 0.0, 0, '')
 I d e n t *(31, 'Ident', 70, 0.0, 0, '')
  (1, 'Ident', 70, 0.0, 0, '')
 =  (9, 'Ident', 70, 0.0, 0, '')
 A R R A Y  ('ARRAY', 'ARRAY', 70, 0.0, 0, '')
 I d L e n  (31, 'IdLen', 70, 0.0, 0, '')
 O F  ('OF', 'OF', 70, 0.0, 0, '')
 C H A R ;(31, 'CHAR', 70, 0.0, 0, '')
(52, 'CHAR', 70, 0.0, 0, '')


    V A R  ('VAR', 'VAR', 70, 0.0, 0, '')
 i v a l *(31, 'ival', 70, 0.0, 0, '')
 ,(1, 'ival', 70, 0.0, 0, '')
  (40, 'ival', 70, 0.0, 0, '')
 s l e n *(31, 'slen', 70, 0.0, 0, '')
 :(1, 'slen', 70, 0.0, 0, '')
  (41, 'slen', 70, 0.0, 0, '')
 L O N G I N T ;(31, 'LONGINT', 70, 0.0, 0, '')
  (52, 'LONGINT', 70, 0.0, 0, '')
   ( * r e s u l t s   o f   G e t * ) 
(1, 'LONGINT', 70, 0.0, 0, '')
        r v a l *(31, 'rval', 70, 0.0, 0, '')
 :(1, 'rval', 70, 0.0, 0, '')
  (41, 'rval', 70, 0.0, 0, '')
 R E A L ;(31, 'REAL', 70, 0.0, 0, '')
(52, 'REAL', 70, 0.0, 0, '')

        i d *(31, 'id', 70, 0.0, 0, '')
 :(1, 'id', 70, 0.0, 0, '')
  (41, 'id', 70, 0.0, 0, '')
 I d e n t ;(31, 'Ident', 70, 0.0, 0, '')
  (52, 'Ident', 70, 0.0, 0, '')
   ( * f o r   i d e n t i f i e r s * ) 
(1, 'Ident', 70, 0.0, 0, '')
        s t r *(31, 'str', 70, 0.0, 0, '')
 :(1, 'str', 70, 0.0, 0, '')
  (41, 'str', 70, 0.0, 0, '')
 A R R A Y  ('ARRAY', 'ARRAY', 70, 0.0, 0, '')
 s t r i n g B u f S i z e  (31, 'stringBufSize', 70, 0.0, 0, '')
 O F  ('OF', 'OF', 70, 0.0, 0, '')
 C H A R ;(31, 'CHAR', 70, 0.0, 0, '')
(52, 'CHAR', 70, 0.0, 0, '')

        e r r c n t *(31, 'errcnt', 70, 0.0, 0, '')
 :(1, 'errcnt', 70, 0.0, 0, '')
  (41, 'errcnt', 70, 0.0, 0, '')
 I N T E G E R ;(31, 'INTEGER', 70, 0.0, 0, '')
(52, 'INTEGER', 70, 0.0, 0, '')


        c h :(31, 'ch', 70, 0.0, 0, '')
  (41, 'ch', 70, 0.0, 0, '')
 C H A R ;(31, 'CHAR', 70, 0.0, 0, '')
  (52, 'CHAR', 70, 0.0, 0, '')
   ( * l a s t   c h a r a c t e r   r e a d * ) 
(1, 'CHAR', 70, 0.0, 0, '')
        e r r p o s :(31, 'errpos', 70, 0.0, 0, '')
  (41, 'errpos', 70, 0.0, 0, '')
 L O N G I N T ;(31, 'LONGINT', 70, 0.0, 0, '')
(52, 'LONGINT', 70, 0.0, 0, '')

        R :(31, 'R', 70, 0.0, 0, '')
  (41, 'R', 70, 0.0, 0, '')
 T e x t s .(31, 'Texts', 70, 0.0, 0, '')
 R(18, 'Texts', 70, 0.0, 0, '')
 e a d e r ;(31, 'Reader', 70, 0.0, 0, '')
(52, 'Reader', 70, 0.0, 0, '')

        W :(31, 'W', 70, 0.0, 0, '')
  (41, 'W', 70, 0.0, 0, '')
 T e x t s .(31, 'Texts', 70, 0.0, 0, '')
 W(18, 'Texts', 70, 0.0, 0, '')
 r i t e r ;(31, 'Writer', 70, 0.0, 0, '')
(52, 'Writer', 70, 0.0, 0, '')

        k :(31, 'k', 70, 0.0, 0, '')
  (41, 'k', 70, 0.0, 0, '')
 I N T E G E R ;(31, 'INTEGER', 70, 0.0, 0, '')
(52, 'INTEGER', 70, 0.0, 0, '')

        K W X :(31, 'KWX', 70, 0.0, 0, '')
  (41, 'KWX', 70, 0.0, 0, '')
 A R R A Y  ('ARRAY', 'ARRAY', 70, 0.0, 0, '')
 1 0  ('ARRAY', 'ARRAY', 10, 0.0, 0, '')
 O F  ('OF', 'OF', 10, 0.0, 0, '')
 I N T E G E R ;(31, 'INTEGER', 10, 0.0, 0, '')
(52, 'INTEGER', 10, 0.0, 0, '')

        k e y T a b :(31, 'keyTab', 10, 0.0, 0, '')
  (41, 'keyTab', 10, 0.0, 0, '')
 A R R A Y  ('ARRAY', 'ARRAY', 10, 0.0, 0, '')
 N K W  (31, 'NKW', 10, 0.0, 0, '')
('OF', 'OF', 10, 0.0, 0, '')

                R E C O R D  ('RECORD', 'RECORD', 10, 0.0, 0, '')
 s y m :(31, 'sym', 10, 0.0, 0, '')
  (41, 'sym', 10, 0.0, 0, '')
 I N T E G E R ;(31, 'INTEGER', 10, 0.0, 0, '')
  (52, 'INTEGER', 10, 0.0, 0, '')
 i d :(31, 'id', 10, 0.0, 0, '')
  (41, 'id', 10, 0.0, 0, '')
 A R R A Y  ('ARRAY', 'ARRAY', 10, 0.0, 0, '')
 1 2  ('ARRAY', 'ARRAY', 12, 0.0, 0, '')
 O F  ('OF', 'OF', 12, 0.0, 0, '')
 C H A R  (31, 'CHAR', 12, 0.0, 0, '')
 E N D ;('END', 'END', 12, 0.0, 0, '')
(52, 'END', 12, 0.0, 0, '')

    
    P R O C E D U R E  ('PROCEDURE', 'PROCEDURE', 12, 0.0, 0, '')
 C o p y I d *(31, 'CopyId', 12, 0.0, 0, '')
 ((1, 'CopyId', 12, 0.0, 0, '')
 V(28, 'CopyId', 12, 0.0, 0, '')
 A R  ('VAR', 'VAR', 12, 0.0, 0, '')
 i d e n t :(31, 'ident', 12, 0.0, 0, '')
  (41, 'ident', 12, 0.0, 0, '')
 I d e n t )(31, 'Ident', 12, 0.0, 0, '')
 ;(44, 'Ident', 12, 0.0, 0, '')
(52, 'Ident', 12, 0.0, 0, '')

    B E G I N  ('BEGIN', 'BEGIN', 12, 0.0, 0, '')
 i d e n t  (31, 'ident', 12, 0.0, 0, '')
 : =  (42, 'ident', 12, 0.0, 0, '')
(31, 'id', 12, 0.0, 0, '')

    E N D  ('END', 'END', 12, 0.0, 0, '')
 C o p y I d ;(31, 'CopyId', 12, 0.0, 0, '')
(52, 'CopyId', 12, 0.0, 0, '')


    P R O C E D U R E  ('PROCEDURE', 'PROCEDURE', 12, 0.0, 0, '')
 P o s *(31, 'Pos', 12, 0.0, 0, '')
 ((1, 'Pos', 12, 0.0, 0, '')
 )(28, 'Pos', 12, 0.0, 0, '')
 :(44, 'Pos', 12, 0.0, 0, '')
  (41, 'Pos', 12, 0.0, 0, '')
 L O N G I N T ;(31, 'LONGINT', 12, 0.0, 0, '')
(52, 'LONGINT', 12, 0.0, 0, '')

    B E G I N  ('BEGIN', 'BEGIN', 12, 0.0, 0, '')
 R E T U R N  ('RETURN', 'RETURN', 12, 0.0, 0, '')
 T e x t s .(31, 'Texts', 12, 0.0, 0, '')
 P(18, 'Texts', 12, 0.0, 0, '')
 o s ((31, 'Pos', 12, 0.0, 0, '')
 R(28, 'Pos', 12, 0.0, 0, '')
 )(31, 'R', 12, 0.0, 0, '')
  (44, 'R', 12, 0.0, 0, '')
 -  (7, 'R', 12, 0.0, 0, '')
(7, 'R', 1, 0.0, 0, '')

    E N D  ('END', 'END', 1, 0.0, 0, '')
 P o s ;(31, 'Pos', 1, 0.0, 0, '')
(52, 'Pos', 1, 0.0, 0, '')


    P R O C E D U R E  ('PROCEDURE', 'PROCEDURE', 1, 0.0, 0, '')
 M a r k *(31, 'Mark', 1, 0.0, 0, '')
 ((1, 'Mark', 1, 0.0, 0, '')
 m(28, 'Mark', 1, 0.0, 0, '')
 s g :(31, 'msg', 1, 0.0, 0, '')
  (41, 'msg', 1, 0.0, 0, '')
 A R R A Y  ('ARRAY', 'ARRAY', 1, 0.0, 0, '')
 O F  ('OF', 'OF', 1, 0.0, 0, '')
 C H A R )(31, 'CHAR', 1, 0.0, 0, '')
 ;(44, 'CHAR', 1, 0.0, 0, '')
(52, 'CHAR', 1, 0.0, 0, '')

        V A R  ('VAR', 'VAR', 1, 0.0, 0, '')
 p :(31, 'p', 1, 0.0, 0, '')
  (41, 'p', 1, 0.0, 0, '')
 L O N G I N T ;(31, 'LONGINT', 1, 0.0, 0, '')
(52, 'LONGINT', 1, 0.0, 0, '')

    B E G I N  ('BEGIN', 'BEGIN', 1, 0.0, 0, '')
 p  (31, 'p', 1, 0.0, 0, '')
 : =  (42, 'p', 1, 0.0, 0, '')
 P o s ((31, 'Pos', 1, 0.0, 0, '')
 )(28, 'Pos', 1, 0.0, 0, '')
 ;(44, 'Pos', 1, 0.0, 0, '')
(52, 'Pos', 1, 0.0, 0, '')

        I F  ('IF', 'IF', 1, 0.0, 0, '')
 ( p(28, 'IF', 1, 0.0, 0, '')
  (31, 'p', 1, 0.0, 0, '')
 >  (13, 'p', 1, 0.0, 0, '')
 e r r p o s )(31, 'errpos', 1, 0.0, 0, '')
  (44, 'errpos', 1, 0.0, 0, '')
 &  (5, 'errpos', 1, 0.0, 0, '')
 ( e(28, 'errpos', 1, 0.0, 0, '')
 r r c n t  (31, 'errcnt', 1, 0.0, 0, '')
 <  (11, 'errcnt', 1, 0.0, 0, '')
 2 5 )(11, 'errcnt', 25, 0.0, 0, '')
  (44, 'errcnt', 25, 0.0, 0, '')
('THEN', 'THEN', 25, 0.0, 0, '')

            T e x t s .(31, 'Texts', 25, 0.0, 0, '')
 W(18, 'Texts', 25, 0.0, 0, '')
 r i t e L n ((31, 'WriteLn', 25, 0.0, 0, '')
 W(28, 'WriteLn', 25, 0.0, 0, '')
 )(31, 'W', 25, 0.0, 0, '')
 ;(44, 'W', 25, 0.0, 0, '')
  (52, 'W', 25, 0.0, 0, '')
 T e x t s .(31, 'Texts', 25, 0.0, 0, '')
 W(18, 'Texts', 25, 0.0, 0, '')
 r i t e S t r i n g ((31, 'WriteString', 25, 0.0, 0, '')
 W(28, 'WriteString', 25, 0.0, 0, '')
 ,(31, 'W', 25, 0.0, 0, '')
  (40, 'W', 25, 0.0, 0, '')
 "     p o s  (31, 'pos', 25, 0.0, 0, '')
 " ) ;(44, 'pos', 25, 0.0, 0, '')
  (52, 'pos', 25, 0.0, 0, '')
 T e x t s .(31, 'Texts', 25, 0.0, 0, '')
 W(18, 'Texts', 25, 0.0, 0, '')
 r i t e I n t ((31, 'WriteInt', 25, 0.0, 0, '')
 W(28, 'WriteInt', 25, 0.0, 0, '')
 ,(31, 'W', 25, 0.0, 0, '')
  (40, 'W', 25, 0.0, 0, '')
 p ,(31, 'p', 25, 0.0, 0, '')
  (40, 'p', 25, 0.0, 0, '')
 1 )(40, 'p', 1, 0.0, 0, '')
 ;(44, 'p', 1, 0.0, 0, '')
  (52, 'p', 1, 0.0, 0, '')
 T e x t s .(31, 'Texts', 1, 0.0, 0, '')
 W(18, 'Texts', 1, 0.0, 0, '')
 r i t e ((31, 'Write', 1, 0.0, 0, '')
 W(28, 'Write', 1, 0.0, 0, '')
 ,(31, 'W', 1, 0.0, 0, '')
  (40, 'W', 1, 0.0, 0, '')
 "   " ) ;(44, 'W', 1, 0.0, 0, '')
(52, 'W', 1, 0.0, 0, '')

            T e x t s .(31, 'Texts', 1, 0.0, 0, '')
 W(18, 'Texts', 1, 0.0, 0, '')
 r i t e S t r i n g ((31, 'WriteString', 1, 0.0, 0, '')
 W(28, 'WriteString', 1, 0.0, 0, '')
 ,(31, 'W', 1, 0.0, 0, '')
  (40, 'W', 1, 0.0, 0, '')
 m s g )(31, 'msg', 1, 0.0, 0, '')
 ;(44, 'msg', 1, 0.0, 0, '')
  (52, 'msg', 1, 0.0, 0, '')
 T e x t s .(31, 'Texts', 1, 0.0, 0, '')
 A(18, 'Texts', 1, 0.0, 0, '')
 p p e n d ((31, 'Append', 1, 0.0, 0, '')
 O(28, 'Append', 1, 0.0, 0, '')
 b e r o n .(31, 'Oberon', 1, 0.0, 0, '')
 L(18, 'Oberon', 1, 0.0, 0, '')
 o g ,(31, 'Log', 1, 0.0, 0, '')
  (40, 'Log', 1, 0.0, 0, '')
 W .(31, 'W', 1, 0.0, 0, '')
 b(18, 'W', 1, 0.0, 0, '')
 u f )(31, 'buf', 1, 0.0, 0, '')
(44, 'buf', 1, 0.0, 0, '')

        E N D  ('END', 'END', 1, 0.0, 0, '')
(52, 'END', 1, 0.0, 0, '')

        I N C ((31, 'INC', 1, 0.0, 0, '')
 e(28, 'INC', 1, 0.0, 0, '')
 r r c n t )(31, 'errcnt', 1, 0.0, 0, '')
 ;(44, 'errcnt', 1, 0.0, 0, '')
  (52, 'errcnt', 1, 0.0, 0, '')
 e r r p o s  (31, 'errpos', 1, 0.0, 0, '')
 : =  (42, 'errpos', 1, 0.0, 0, '')
 p  (31, 'p', 1, 0.0, 0, '')
 +  (6, 'p', 1, 0.0, 0, '')
(6, 'p', 4, 0.0, 0, '')

    E N D  ('END', 'END', 4, 0.0, 0, '')
 M a r k ;(31, 'Mark', 4, 0.0, 0, '')
(52, 'Mark', 4, 0.0, 0, '')


    P R O C E D U R E  ('PROCEDURE', 'PROCEDURE', 4, 0.0, 0, '')
 I d e n t i f i e r ((31, 'Identifier', 4, 0.0, 0, '')
 V(28, 'Identifier', 4, 0.0, 0, '')
 A R  ('VAR', 'VAR', 4, 0.0, 0, '')
 s y m :(31, 'sym', 4, 0.0, 0, '')
  (41, 'sym', 4, 0.0, 0, '')
 I N T E G E R )(31, 'INTEGER', 4, 0.0, 0, '')
 ;(44, 'INTEGER', 4, 0.0, 0, '')
(52, 'INTEGER', 4, 0.0, 0, '')

        V A R  ('VAR', 'VAR', 4, 0.0, 0, '')
 i ,(31, 'i', 4, 0.0, 0, '')
  (40, 'i', 4, 0.0, 0, '')
 k :(31, 'k', 4, 0.0, 0, '')
  (41, 'k', 4, 0.0, 0, '')
 I N T E G E R ;(31, 'INTEGER', 4, 0.0, 0, '')
(52, 'INTEGER', 4, 0.0, 0, '')

    B E G I N  ('BEGIN', 'BEGIN', 4, 0.0, 0, '')
 i  (31, 'i', 4, 0.0, 0, '')
 : =  (42, 'i', 4, 0.0, 0, '')
 0 ;(42, 'i', 0, 0.0, 0, '')
(52, 'i', 0, 0.0, 0, '')

('REPEAT', 'REPEAT', 0, 0.0, 0, '')

            I F  ('IF', 'IF', 0, 0.0, 0, '')
 i  (31, 'i', 0, 0.0, 0, '')
 <  (11, 'i', 0, 0.0, 0, '')
 I d L e n -(31, 'IdLen', 0, 0.0, 0, '')
 1(7, 'IdLen', 0, 0.0, 0, '')
  (7, 'IdLen', 1, 0.0, 0, '')
 T H E N  ('THEN', 'THEN', 1, 0.0, 0, '')
 i d [(31, 'id', 1, 0.0, 0, '')
 i(29, 'id', 1, 0.0, 0, '')
 ](31, 'i', 1, 0.0, 0, '')
  (45, 'i', 1, 0.0, 0, '')
 : =  (42, 'i', 1, 0.0, 0, '')
 c h ;(31, 'ch', 1, 0.0, 0, '')
  (52, 'ch', 1, 0.0, 0, '')
 I N C ((31, 'INC', 1, 0.0, 0, '')
 i(28, 'INC', 1, 0.0, 0, '')
 )(31, 'i', 1, 0.0, 0, '')
  (44, 'i', 1, 0.0, 0, '')
 E N D  ('END', 'END', 1, 0.0, 0, '')
(52, 'END', 1, 0.0, 0, '')

            T e x t s .(31, 'Texts', 1, 0.0, 0, '')
 R(18, 'Texts', 1, 0.0, 0, '')
 e a d ((31, 'Read', 1, 0.0, 0, '')
 R(28, 'Read', 1, 0.0, 0, '')
 ,(31, 'R', 1, 0.0, 0, '')
  (40, 'R', 1, 0.0, 0, '')
 c h )(31, 'ch', 1, 0.0, 0, '')
(44, 'ch', 1, 0.0, 0, '')

        U N T I L  ('UNTIL', 'UNTIL', 1, 0.0, 0, '')
 ( c(28, 'UNTIL', 1, 0.0, 0, '')
 h  (31, 'ch', 1, 0.0, 0, '')
 <  (11, 'ch', 1, 0.0, 0, '')
 " 0 " )  (44, 'ch', 0, 0.0, 0, '')
 O R  ('OR', 'OR', 0, 0.0, 0, '')
 ( c(28, 'OR', 0, 0.0, 0, '')
 h  (31, 'ch', 0, 0.0, 0, '')
 >  (13, 'ch', 0, 0.0, 0, '')
 " 9 " )  (44, 'ch', 9, 0.0, 0, '')
 &  (5, 'ch', 9, 0.0, 0, '')
 ( c(28, 'ch', 9, 0.0, 0, '')
 h  (31, 'ch', 9, 0.0, 0, '')
 <  (11, 'ch', 9, 0.0, 0, '')
 " A "(31, 'A', 9, 0.0, 0, '')
 )  (44, 'A', 9, 0.0, 0, '')
 O R  ('OR', 'OR', 9, 0.0, 0, '')
 ( c(28, 'OR', 9, 0.0, 0, '')
 h  (31, 'ch', 9, 0.0, 0, '')
 >  (13, 'ch', 9, 0.0, 0, '')
 " Z "(31, 'Z', 9, 0.0, 0, '')
 )  (44, 'Z', 9, 0.0, 0, '')
 &  (5, 'Z', 9, 0.0, 0, '')
 ( c(28, 'Z', 9, 0.0, 0, '')
 h  (31, 'ch', 9, 0.0, 0, '')
 <  (11, 'ch', 9, 0.0, 0, '')
 " a "(31, 'a', 9, 0.0, 0, '')
 )  (44, 'a', 9, 0.0, 0, '')
 O R  ('OR', 'OR', 9, 0.0, 0, '')
 ( c(28, 'OR', 9, 0.0, 0, '')
 h  (31, 'ch', 9, 0.0, 0, '')
 >  (13, 'ch', 9, 0.0, 0, '')
 " z "(31, 'z', 9, 0.0, 0, '')
 ) ;(44, 'z', 9, 0.0, 0, '')
(52, 'z', 9, 0.0, 0, '')

        i d [(31, 'id', 9, 0.0, 0, '')
 i(29, 'id', 9, 0.0, 0, '')
 ](31, 'i', 9, 0.0, 0, '')
  (45, 'i', 9, 0.0, 0, '')
 : =  (42, 'i', 9, 0.0, 0, '')
 0 X ;(42, 'i', 0, 0.0, 0, '')
  (52, 'i', 0, 0.0, 0, '')
 
        I F  ('IF', 'IF', 0, 0.0, 0, '')
 i  (31, 'i', 0, 0.0, 0, '')
 <  (11, 'i', 0, 0.0, 0, '')
 1 0  (11, 'i', 10, 0.0, 0, '')
 T H E N  ('THEN', 'THEN', 10, 0.0, 0, '')
 k  (31, 'k', 10, 0.0, 0, '')
 : =  (42, 'k', 10, 0.0, 0, '')
 K W X [(31, 'KWX', 10, 0.0, 0, '')
 i(29, 'KWX', 10, 0.0, 0, '')
 -(31, 'i', 10, 0.0, 0, '')
 1(7, 'i', 10, 0.0, 0, '')
 ](7, 'i', 1, 0.0, 0, '')
 ;(45, 'i', 1, 0.0, 0, '')
  (52, 'i', 1, 0.0, 0, '')
   ( * s e a r c h   f o r   k e y w o r d * ) 
(1, 'i', 1, 0.0, 0, '')
            W H I L E  ('WHILE', 'WHILE', 1, 0.0, 0, '')
 ( i(28, 'WHILE', 1, 0.0, 0, '')
 d  (31, 'id', 1, 0.0, 0, '')
 #  (10, 'id', 1, 0.0, 0, '')
 k e y T a b [(31, 'keyTab', 1, 0.0, 0, '')
 k(29, 'keyTab', 1, 0.0, 0, '')
 ](31, 'k', 1, 0.0, 0, '')
 .(45, 'k', 1, 0.0, 0, '')
 i(18, 'k', 1, 0.0, 0, '')
 d )(31, 'id', 1, 0.0, 0, '')
  (44, 'id', 1, 0.0, 0, '')
 &  (5, 'id', 1, 0.0, 0, '')
 ( k(28, 'id', 1, 0.0, 0, '')
  (31, 'k', 1, 0.0, 0, '')
 <  (11, 'k', 1, 0.0, 0, '')
 K W X [(31, 'KWX', 1, 0.0, 0, '')
 i(29, 'KWX', 1, 0.0, 0, '')
 ](31, 'i', 1, 0.0, 0, '')
 )(45, 'i', 1, 0.0, 0, '')
  (44, 'i', 1, 0.0, 0, '')
 D O  ('DO', 'DO', 1, 0.0, 0, '')
 I N C ((31, 'INC', 1, 0.0, 0, '')
 k(28, 'INC', 1, 0.0, 0, '')
 )(31, 'k', 1, 0.0, 0, '')
  (44, 'k', 1, 0.0, 0, '')
 E N D  ('END', 'END', 1, 0.0, 0, '')
(52, 'END', 1, 0.0, 0, '')

            I F  ('IF', 'IF', 1, 0.0, 0, '')
 k  (31, 'k', 1, 0.0, 0, '')
 <  (11, 'k', 1, 0.0, 0, '')
 K W X [(31, 'KWX', 1, 0.0, 0, '')
 i(29, 'KWX', 1, 0.0, 0, '')
 ](31, 'i', 1, 0.0, 0, '')
  (45, 'i', 1, 0.0, 0, '')
 T H E N  ('THEN', 'THEN', 1, 0.0, 0, '')
 s y m  (31, 'sym', 1, 0.0, 0, '')
 : =  (42, 'sym', 1, 0.0, 0, '')
 k e y T a b [(31, 'keyTab', 1, 0.0, 0, '')
 k(29, 'keyTab', 1, 0.0, 0, '')
 ](31, 'k', 1, 0.0, 0, '')
 .(45, 'k', 1, 0.0, 0, '')
 s(18, 'k', 1, 0.0, 0, '')
 y m  (31, 'sym', 1, 0.0, 0, '')
 E L S E  ('ELSE', 'ELSE', 1, 0.0, 0, '')
 s y m  (31, 'sym', 1, 0.0, 0, '')
 : =  (42, 'sym', 1, 0.0, 0, '')
 i d e n t  (31, 'ident', 1, 0.0, 0, '')
('END', 'END', 1, 0.0, 0, '')

        E L S E  ('ELSE', 'ELSE', 1, 0.0, 0, '')
 s y m  (31, 'sym', 1, 0.0, 0, '')
 : =  (42, 'sym', 1, 0.0, 0, '')
(31, 'ident', 1, 0.0, 0, '')

('END', 'END', 1, 0.0, 0, '')

    E N D  ('END', 'END', 1, 0.0, 0, '')
 I d e n t i f i e r ;(31, 'Identifier', 1, 0.0, 0, '')
(52, 'Identifier', 1, 0.0, 0, '')


    P R O C E D U R E  ('PROCEDURE', 'PROCEDURE', 1, 0.0, 0, '')
 S t r i n g ;(31, 'String', 1, 0.0, 0, '')
(52, 'String', 1, 0.0, 0, '')

        V A R  ('VAR', 'VAR', 1, 0.0, 0, '')
 i :(31, 'i', 1, 0.0, 0, '')
  (41, 'i', 1, 0.0, 0, '')
 I N T E G E R ;(31, 'INTEGER', 1, 0.0, 0, '')
(52, 'INTEGER', 1, 0.0, 0, '')

    B E G I N  ('BEGIN', 'BEGIN', 1, 0.0, 0, '')
 i  (31, 'i', 1, 0.0, 0, '')
 : =  (42, 'i', 1, 0.0, 0, '')
 0 ;(42, 'i', 0, 0.0, 0, '')
  (52, 'i', 0, 0.0, 0, '')
 T e x t s .(31, 'Texts', 0, 0.0, 0, '')
 R(18, 'Texts', 0, 0.0, 0, '')
 e a d ((31, 'Read', 0, 0.0, 0, '')
 R(28, 'Read', 0, 0.0, 0, '')
 ,(31, 'R', 0, 0.0, 0, '')
  (40, 'R', 0, 0.0, 0, '')
 c h )(31, 'ch', 0, 0.0, 0, '')
 ;(44, 'ch', 0, 0.0, 0, '')
(52, 'ch', 0, 0.0, 0, '')

        W H I L E  ('WHILE', 'WHILE', 0, 0.0, 0, '')
 ~ R(27, 'WHILE', 0, 0.0, 0, '')
 .(31, 'R', 0, 0.0, 0, '')
 e(18, 'R', 0, 0.0, 0, '')
 o t  (31, 'eot', 0, 0.0, 0, '')
 &  (5, 'eot', 0, 0.0, 0, '')
 ( c(28, 'eot', 0, 0.0, 0, '')
 h  (31, 'ch', 0, 0.0, 0, '')
 #  (10, 'ch', 0, 0.0, 0, '')
 2 2 X )(10, 'ch', 34, 0.0, 0, '')
  (44, 'ch', 34, 0.0, 0, '')
('DO', 'DO', 34, 0.0, 0, '')

            I F  ('IF', 'IF', 34, 0.0, 0, '')
 c h  (31, 'ch', 34, 0.0, 0, '')
 > =  (14, 'ch', 34, 0.0, 0, '')
('THEN', 'THEN', 34, 0.0, 0, '')

                I F  ('IF', 'IF', 34, 0.0, 0, '')
 i  (31, 'i', 34, 0.0, 0, '')
 <  (11, 'i', 34, 0.0, 0, '')
 s t r i n g B u f S i z e -(31, 'stringBufSize', 34, 0.0, 0, '')
 1(7, 'stringBufSize', 34, 0.0, 0, '')
  (7, 'stringBufSize', 1, 0.0, 0, '')
 T H E N  ('THEN', 'THEN', 1, 0.0, 0, '')
 s t r [(31, 'str', 1, 0.0, 0, '')
 i(29, 'str', 1, 0.0, 0, '')
 ](31, 'i', 1, 0.0, 0, '')
  (45, 'i', 1, 0.0, 0, '')
 : =  (42, 'i', 1, 0.0, 0, '')
 c h ;(31, 'ch', 1, 0.0, 0, '')
  (52, 'ch', 1, 0.0, 0, '')
 I N C ((31, 'INC', 1, 0.0, 0, '')
 i(28, 'INC', 1, 0.0, 0, '')
 )(31, 'i', 1, 0.0, 0, '')
  (44, 'i', 1, 0.0, 0, '')
 E L S E  ('ELSE', 'ELSE', 1, 0.0, 0, '')
 M a r k ((31, 'Mark', 1, 0.0, 0, '')
 "(28, 'Mark', 1, 0.0, 0, '')
 s t r i n g  (31, 'string', 1, 0.0, 0, '')
 t o o  (31, 'too', 1, 0.0, 0, '')
 l o n g "(31, 'long', 1, 0.0, 0, '')
 )  (44, 'long', 1, 0.0, 0, '')
 E N D  ('END', 'END', 1, 0.0, 0, '')
(52, 'END', 1, 0.0, 0, '')

            E N D  ('END', 'END', 1, 0.0, 0, '')
(52, 'END', 1, 0.0, 0, '')

            T e x t s .(31, 'Texts', 1, 0.0, 0, '')
 R(18, 'Texts', 1, 0.0, 0, '')
 e a d ((31, 'Read', 1, 0.0, 0, '')
 R(28, 'Read', 1, 0.0, 0, '')
 ,(31, 'R', 1, 0.0, 0, '')
  (40, 'R', 1, 0.0, 0, '')
 c h )(31, 'ch', 1, 0.0, 0, '')
(44, 'ch', 1, 0.0, 0, '')

        E N D  ('END', 'END', 1, 0.0, 0, '')
(52, 'END', 1, 0.0, 0, '')

        s t r [(31, 'str', 1, 0.0, 0, '')
 i(29, 'str', 1, 0.0, 0, '')
 ](31, 'i', 1, 0.0, 0, '')
  (45, 'i', 1, 0.0, 0, '')
 : =  (42, 'i', 1, 0.0, 0, '')
 0 X ;(42, 'i', 0, 0.0, 0, '')
  (52, 'i', 0, 0.0, 0, '')
 I N C ((31, 'INC', 0, 0.0, 0, '')
 i(28, 'INC', 0, 0.0, 0, '')
 )(31, 'i', 0, 0.0, 0, '')
 ;(44, 'i', 0, 0.0, 0, '')
  (52, 'i', 0, 0.0, 0, '')
 T e x t s .(31, 'Texts', 0, 0.0, 0, '')
 R(18, 'Texts', 0, 0.0, 0, '')
 e a d ((31, 'Read', 0, 0.0, 0, '')
 R(28, 'Read', 0, 0.0, 0, '')
 ,(31, 'R', 0, 0.0, 0, '')
  (40, 'R', 0, 0.0, 0, '')
 c h )(31, 'ch', 0, 0.0, 0, '')
 ;(44, 'ch', 0, 0.0, 0, '')
  (52, 'ch', 0, 0.0, 0, '')
 s l e n  (31, 'slen', 0, 0.0, 0, '')
 : =  (42, 'slen', 0, 0.0, 0, '')
(31, 'i', 0, 0.0, 0, '')

    E N D  ('END', 'END', 0, 0.0, 0, '')
 S t r i n g ;(31, 'String', 0, 0.0, 0, '')
(52, 'String', 0, 0.0, 0, '')


    P R O C E D U R E  ('PROCEDURE', 'PROCEDURE', 0, 0.0, 0, '')
 H e x S t r i n g ;(31, 'HexString', 0, 0.0, 0, '')
(52, 'HexString', 0, 0.0, 0, '')

        V A R  ('VAR', 'VAR', 0, 0.0, 0, '')
 i ,(31, 'i', 0, 0.0, 0, '')
  (40, 'i', 0, 0.0, 0, '')
 m ,(31, 'm', 0, 0.0, 0, '')
  (40, 'm', 0, 0.0, 0, '')
 n :(31, 'n', 0, 0.0, 0, '')
  (41, 'n', 0, 0.0, 0, '')
 I N T E G E R ;(31, 'INTEGER', 0, 0.0, 0, '')
(52, 'INTEGER', 0, 0.0, 0, '')

    B E G I N  ('BEGIN', 'BEGIN', 0, 0.0, 0, '')
 i  (31, 'i', 0, 0.0, 0, '')
 : =  (42, 'i', 0, 0.0, 0, '')
 0 ;(42, 'i', 0, 0.0, 0, '')
  (52, 'i', 0, 0.0, 0, '')
 T e x t s .(31, 'Texts', 0, 0.0, 0, '')
 R(18, 'Texts', 0, 0.0, 0, '')
 e a d ((31, 'Read', 0, 0.0, 0, '')
 R(28, 'Read', 0, 0.0, 0, '')
 ,(31, 'R', 0, 0.0, 0, '')
  (40, 'R', 0, 0.0, 0, '')
 c h )(31, 'ch', 0, 0.0, 0, '')
 ;(44, 'ch', 0, 0.0, 0, '')
(52, 'ch', 0, 0.0, 0, '')

        W H I L E  ('WHILE', 'WHILE', 0, 0.0, 0, '')
 ~ R(27, 'WHILE', 0, 0.0, 0, '')
 .(31, 'R', 0, 0.0, 0, '')
 e(18, 'R', 0, 0.0, 0, '')
 o t  (31, 'eot', 0, 0.0, 0, '')
 &  (5, 'eot', 0, 0.0, 0, '')
 ( c(28, 'eot', 0, 0.0, 0, '')
 h  (31, 'ch', 0, 0.0, 0, '')
 #  (10, 'ch', 0, 0.0, 0, '')
 " $ "pos 3616 hexdig expected
Traceback (most recent call last):
  File "ORSX.py", line 483, in <module>
    for tok in doit():
  File "ORSX.py", line 476, in doit
    Get()
  File "ORSX.py", line 364, in Get
    HexString(); sym = string
  File "ORSX.py", line 173, in HexString
    m = 0; Mark("hexdig expected")
  File "ORSX.py", line 122, in Mark
    raise ValueError
ValueError

